// CodeGear C++Builder
// Copyright (c) 1995, 2021 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'Datasnap.DSService.pas' rev: 34.00 (Windows)

#ifndef Datasnap_DsserviceHPP
#define Datasnap_DsserviceHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Classes.hpp>
#include <System.JSON.hpp>
#include <Data.DBXCommon.hpp>
#include <Data.DbxDatasnap.hpp>
#include <System.Generics.Collections.hpp>
#include <Datasnap.DSCommonServer.hpp>
#include <System.SysUtils.hpp>
#include <IPPeerAPI.hpp>
#include <System.Generics.Defaults.hpp>
#include <System.Types.hpp>

//-- user supplied -----------------------------------------------------------

namespace Datasnap
{
namespace Dsservice
{
//-- forward type declarations -----------------------------------------------
template<typename T> class DELPHICLASS TDSRequestFilter__1;
class DELPHICLASS TDBXRequestFilter;
class DELPHICLASS TDBXCropRequestFilter;
class DELPHICLASS TDBXSubStringRequestFilter;
class DELPHICLASS TDBXReaderRequestFilter;
class DELPHICLASS TDBXRequestFilterFactory;
class DELPHICLASS TDSServiceException;
class DELPHICLASS TDSRequestFilterManager;
class DELPHICLASS TDSService;
class DELPHICLASS TDSRESTService;
class DELPHICLASS TDSJSONService;
//-- type declarations -------------------------------------------------------
typedef System::Set<System::Int8, 0, 64> TParamRange;

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TDSRequestFilter__1 : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	System::UnicodeString FName;
	TParamRange FRange;
	bool FOnResult;
	System::UnicodeString FTypeName;
	
protected:
	__fastcall virtual TDSRequestFilter__1(const System::UnicodeString TypeName);
	
public:
	__fastcall virtual ~TDSRequestFilter__1();
	virtual bool __fastcall SetParameterValue(System::UnicodeString ParamName, System::UnicodeString ParamValue);
	virtual bool __fastcall HasParameter(const System::UnicodeString ParamName);
	virtual bool __fastcall CanConvert(T Value) = 0 ;
	virtual System::Json::TJSONValue* __fastcall ToJSON(T Value, bool IsLocal) = 0 ;
	__property System::UnicodeString Name = {read=FName, write=FName};
	__property System::UnicodeString TypeName = {read=FTypeName};
	__property TParamRange Range = {read=FRange, write=FRange};
	__property bool OnResult = {read=FOnResult, write=FOnResult, nodefault};
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDBXRequestFilter : public TDSRequestFilter__1<Data::Dbxcommon::TDBXValue*>
{
	typedef TDSRequestFilter__1<Data::Dbxcommon::TDBXValue*> inherited;
	
public:
	virtual TDBXRequestFilter* __fastcall Clone() = 0 ;
protected:
	/* {Datasnap_DSService}TDSRequestFilter<Data_DBXCommon_TDBXValue>.Create */ inline __fastcall virtual TDBXRequestFilter(const System::UnicodeString TypeName) : TDSRequestFilter__1<Data::Dbxcommon::TDBXValue*>(TypeName) { }
	
public:
	/* {Datasnap_DSService}TDSRequestFilter<Data_DBXCommon_TDBXValue>.Destroy */ inline __fastcall virtual ~TDBXRequestFilter() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDBXCropRequestFilter : public TDBXRequestFilter
{
	typedef TDBXRequestFilter inherited;
	
private:
	int FOff;
	int FCount;
	
protected:
	__fastcall TDBXCropRequestFilter(const System::UnicodeString TypeName, int Off, int Count)/* overload */;
	__property int Off = {read=FOff, nodefault};
	__property int Count = {read=FCount, nodefault};
	
public:
	__fastcall virtual TDBXCropRequestFilter(const System::UnicodeString TypeName)/* overload */;
	__fastcall virtual ~TDBXCropRequestFilter();
	virtual bool __fastcall SetParameterValue(System::UnicodeString ParamName, System::UnicodeString ParamValue);
	virtual bool __fastcall HasParameter(const System::UnicodeString ParamName);
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDBXSubStringRequestFilter : public TDBXCropRequestFilter
{
	typedef TDBXCropRequestFilter inherited;
	
public:
	virtual bool __fastcall CanConvert(Data::Dbxcommon::TDBXValue* Value);
	virtual System::Json::TJSONValue* __fastcall ToJSON(Data::Dbxcommon::TDBXValue* Value, bool IsLocal = false);
	virtual TDBXRequestFilter* __fastcall Clone();
protected:
	/* TDBXCropRequestFilter.Create */ inline __fastcall TDBXSubStringRequestFilter(const System::UnicodeString TypeName, int Off, int Count)/* overload */ : TDBXCropRequestFilter(TypeName, Off, Count) { }
	
public:
	/* TDBXCropRequestFilter.Create */ inline __fastcall virtual TDBXSubStringRequestFilter(const System::UnicodeString TypeName)/* overload */ : TDBXCropRequestFilter(TypeName) { }
	/* TDBXCropRequestFilter.Destroy */ inline __fastcall virtual ~TDBXSubStringRequestFilter() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDBXReaderRequestFilter : public TDBXCropRequestFilter
{
	typedef TDBXCropRequestFilter inherited;
	
public:
	virtual bool __fastcall CanConvert(Data::Dbxcommon::TDBXValue* Value);
	virtual System::Json::TJSONValue* __fastcall ToJSON(Data::Dbxcommon::TDBXValue* Value, bool IsLocal = false);
	virtual TDBXRequestFilter* __fastcall Clone();
protected:
	/* TDBXCropRequestFilter.Create */ inline __fastcall TDBXReaderRequestFilter(const System::UnicodeString TypeName, int Off, int Count)/* overload */ : TDBXCropRequestFilter(TypeName, Off, Count) { }
	
public:
	/* TDBXCropRequestFilter.Create */ inline __fastcall virtual TDBXReaderRequestFilter(const System::UnicodeString TypeName)/* overload */ : TDBXCropRequestFilter(TypeName) { }
	/* TDBXCropRequestFilter.Destroy */ inline __fastcall virtual ~TDBXReaderRequestFilter() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDBXRequestFilterFactory : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	static TDBXRequestFilterFactory* FInstance;
	
private:
	System::Generics::Collections::TDictionary__2<System::UnicodeString,TDBXRequestFilter*>* FRepo;
	__classmethod void __fastcall SetUp();
	__classmethod void __fastcall CleanUp();
	
public:
	__fastcall TDBXRequestFilterFactory();
	__fastcall virtual ~TDBXRequestFilterFactory();
	void __fastcall RegisterRequestFilter(TDBXRequestFilter* Converter);
	TDBXRequestFilter* __fastcall RequestFilter(System::UnicodeString Name);
	void __fastcall GetAllWithField(System::UnicodeString FieldName, System::Generics::Collections::TObjectList__1<TDBXRequestFilter*>* List);
	/* static */ __property TDBXRequestFilterFactory* Instance = {read=FInstance};
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDSServiceException : public System::Sysutils::Exception
{
	typedef System::Sysutils::Exception inherited;
	
public:
	/* Exception.Create */ inline __fastcall TDSServiceException(const System::UnicodeString Msg) : System::Sysutils::Exception(Msg) { }
	/* Exception.CreateFmt */ inline __fastcall TDSServiceException(const System::UnicodeString Msg, const System::TVarRec *Args, const int Args_High) : System::Sysutils::Exception(Msg, Args, Args_High) { }
	/* Exception.CreateRes */ inline __fastcall TDSServiceException(NativeUInt Ident)/* overload */ : System::Sysutils::Exception(Ident) { }
	/* Exception.CreateRes */ inline __fastcall TDSServiceException(System::PResStringRec ResStringRec)/* overload */ : System::Sysutils::Exception(ResStringRec) { }
	/* Exception.CreateResFmt */ inline __fastcall TDSServiceException(NativeUInt Ident, const System::TVarRec *Args, const int Args_High)/* overload */ : System::Sysutils::Exception(Ident, Args, Args_High) { }
	/* Exception.CreateResFmt */ inline __fastcall TDSServiceException(System::PResStringRec ResStringRec, const System::TVarRec *Args, const int Args_High)/* overload */ : System::Sysutils::Exception(ResStringRec, Args, Args_High) { }
	/* Exception.CreateHelp */ inline __fastcall TDSServiceException(const System::UnicodeString Msg, int AHelpContext) : System::Sysutils::Exception(Msg, AHelpContext) { }
	/* Exception.CreateFmtHelp */ inline __fastcall TDSServiceException(const System::UnicodeString Msg, const System::TVarRec *Args, const int Args_High, int AHelpContext) : System::Sysutils::Exception(Msg, Args, Args_High, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall TDSServiceException(NativeUInt Ident, int AHelpContext)/* overload */ : System::Sysutils::Exception(Ident, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall TDSServiceException(System::PResStringRec ResStringRec, int AHelpContext)/* overload */ : System::Sysutils::Exception(ResStringRec, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall TDSServiceException(System::PResStringRec ResStringRec, const System::TVarRec *Args, const int Args_High, int AHelpContext)/* overload */ : System::Sysutils::Exception(ResStringRec, Args, Args_High, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall TDSServiceException(NativeUInt Ident, const System::TVarRec *Args, const int Args_High, int AHelpContext)/* overload */ : System::Sysutils::Exception(Ident, Args, Args_High, AHelpContext) { }
	/* Exception.Destroy */ inline __fastcall virtual ~TDSServiceException() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

typedef System::Generics::Collections::TObjectDictionary__2<System::UnicodeString,TDBXRequestFilter*>* TDBXRequestFilterDictionary;

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDSRequestFilterManager : public System::TObject
{
	typedef System::TObject inherited;
	
protected:
	System::Generics::Collections::TObjectDictionary__2<System::UnicodeString,TDBXRequestFilter*>* FRequestFilterStore;
	bool FStreamAsJSON;
	__classmethod void __fastcall ParseParamName(const System::UnicodeString PName, /* out */ System::UnicodeString &DCName, /* out */ System::UnicodeString &DCType, /* out */ System::UnicodeString &FieldName, /* out */ TParamRange &Range, /* out */ bool &OnResult);
	
public:
	__fastcall virtual TDSRequestFilterManager();
	__fastcall virtual ~TDSRequestFilterManager();
	bool __fastcall ProcessQueryParameter(const System::UnicodeString ParamName, const System::UnicodeString ParamValue);
	void __fastcall FiltersForCriteria(const System::UnicodeString TypeName, const TParamRange &Range, const bool OnResult, System::Generics::Collections::TObjectList__1<TDBXRequestFilter*>* const List)/* overload */;
	void __fastcall FiltersForCriteria(const TParamRange &Range, const bool OnResult, System::Generics::Collections::TObjectList__1<TDBXRequestFilter*>* const List)/* overload */;
	bool __fastcall CheckConvertersForConsistency();
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDSService : public TDSRequestFilterManager
{
	typedef TDSRequestFilterManager inherited;
	
	
protected:
	__interface DELPHIINTERFACE TExecuteCallback;
	typedef System::DelphiInterface<TExecuteCallback> _di_TExecuteCallback;
	__interface TExecuteCallback  : public System::IInterface 
	{
		virtual void __fastcall Invoke(Data::Dbxcommon::TDBXConnection* &AConnection, Data::Dbxcommon::TDBXCommand* &ACommand, Data::Dbxcommon::TRequestCommandHandler* const AResponseHandler) = 0 ;
	};
	
	
private:
	Data::Dbxdatasnap::TDBXDatasnapProperties* FDBXProperties;
	bool FLocalConnection;
	System::Json::TJSONValue* __fastcall GetInputParameterInstance(System::Json::TJSONValue* JsonParam, Data::Dbxcommon::TDBXParameter* Parameter, bool &InstanceOwner);
	void __fastcall ProcessException(Data::Dbxcommon::TRequestCommandHandler* const AResponseHandler, System::Sysutils::Exception* const AExc);
	
protected:
	virtual void __fastcall ProcessRequest(System::Json::TJSONArray* const Request, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler)/* overload */;
	virtual void __fastcall ProcessRequest(const System::UnicodeString ACommand, Data::Dbxcommon::TRequestCommandHandler* const AResponseHandler, _di_TExecuteCallback ACallback)/* overload */;
	void __fastcall Execute(System::Json::TJSONObject* const Request, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler)/* overload */;
	void __fastcall Execute(const System::UnicodeString ACommand, Data::Dbxcommon::TRequestCommandHandler* const AResponseHandler, _di_TExecuteCallback ACallback)/* overload */;
	virtual Data::Dbxcommon::TDBXConnection* __fastcall GetDBXConnection();
	virtual Datasnap::Dscommonserver::TDSCustomServer* __fastcall GetDSServer();
	
public:
	__fastcall virtual TDSService(System::UnicodeString DSServerName, System::UnicodeString DSHostname, int DSPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword)/* overload */;
	__fastcall virtual TDSService(System::UnicodeString DSServerName, System::UnicodeString DSHostname, int DSPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword, System::UnicodeString AIPImplementationID)/* overload */;
	__fastcall virtual ~TDSService();
#ifndef _WIN64
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
#else /* _WIN64 */
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
#endif /* _WIN64 */
	__property bool LocalConnection = {read=FLocalConnection, nodefault};
	__property bool StreamAsJSON = {read=FStreamAsJSON, write=FStreamAsJSON, nodefault};
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDSRESTService : public TDSService
{
	typedef TDSService inherited;
	
private:
	Ippeerapi::_di_IIPPeerProcs FPeerProcs;
	Datasnap::Dscommonserver::TDSCustomServer* FDSServer;
#ifndef _WIN64
	void __fastcall ProcessREST(const System::UnicodeString RequestType, const System::UnicodeString RestRequest, const System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* const ResponseHandler);
#else /* _WIN64 */
	void __fastcall ProcessREST(const System::UnicodeString RequestType, const System::UnicodeString RestRequest, const System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* const ResponseHandler);
#endif /* _WIN64 */
	void __fastcall SetMethodNameWithPrefix(const System::UnicodeString RequestType, const System::UnicodeString ClassName, const System::UnicodeString MethodName, /* out */ System::UnicodeString &DSMethodName);
#ifndef _WIN64
	void __fastcall ProcessParameters(const System::UnicodeString ADSMethodName, System::Classes::TStrings* const Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TDBXCommand* const ACommand);
#else /* _WIN64 */
	void __fastcall ProcessParameters(const System::UnicodeString ADSMethodName, System::Classes::TStrings* const Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TDBXCommand* const ACommand);
#endif /* _WIN64 */
	void __fastcall ParseRequestSegments(const System::UnicodeString Request, System::Classes::TStrings* const Segments);
	Ippeerapi::_di_IIPPeerProcs __fastcall PeerProcs();
	
protected:
	virtual Datasnap::Dscommonserver::TDSCustomServer* __fastcall GetDSServer();
	
public:
	__fastcall virtual TDSRESTService(System::UnicodeString DSServerName, System::UnicodeString DSHostname, int DSPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword, System::UnicodeString AIPImplementationID)/* overload */;
	__fastcall TDSRESTService(Datasnap::Dscommonserver::TDSCustomServer* const ADSServer, System::UnicodeString DSHostname, int DSPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword, System::UnicodeString AIPImplementationID)/* overload */;
	__fastcall virtual ~TDSRESTService();
#ifndef _WIN64
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
#else /* _WIN64 */
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
#endif /* _WIN64 */
public:
	/* TDSService.Create */ inline __fastcall virtual TDSRESTService(System::UnicodeString DSServerName, System::UnicodeString DSHostname, int DSPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword)/* overload */ : TDSService(DSServerName, DSHostname, DSPort, AuthUser, AuthPassword) { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TDSJSONService : public TDSService
{
	typedef TDSService inherited;
	
protected:
#ifndef _WIN64
	void __fastcall ProcessJSONCommand(System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
#else /* _WIN64 */
	void __fastcall ProcessJSONCommand(System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
#endif /* _WIN64 */
	
public:
	__fastcall virtual TDSJSONService(System::UnicodeString dsServerName, System::UnicodeString dsHostname, int dsPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword, System::UnicodeString AIPImplementationID)/* overload */;
	__fastcall virtual ~TDSJSONService();
#ifndef _WIN64
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
#else /* _WIN64 */
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, System::Classes::TStrings* Params, System::TArray__1<System::Byte> Content, Data::Dbxcommon::TRequestCommandHandler* ResponseHandler);
#endif /* _WIN64 */
public:
	/* TDSService.Create */ inline __fastcall virtual TDSJSONService(System::UnicodeString DSServerName, System::UnicodeString DSHostname, int DSPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword)/* overload */ : TDSService(DSServerName, DSHostname, DSPort, AuthUser, AuthPassword) { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

//-- var, const, procedure ---------------------------------------------------
static const System::WideChar REQUEST_DELIMITER = (System::WideChar)(0x2f);
static const System::WideChar REQUEST_PARAM_DELIMITER = (System::WideChar)(0x3f);
#define REST_CONTEXT L"rest"
#define JSON_CONTEXT L"json"
#define CACHE_CONTEXT L"cache"
}	/* namespace Dsservice */
}	/* namespace Datasnap */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_DATASNAP_DSSERVICE)
using namespace Datasnap::Dsservice;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_DATASNAP)
using namespace Datasnap;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Datasnap_DsserviceHPP
