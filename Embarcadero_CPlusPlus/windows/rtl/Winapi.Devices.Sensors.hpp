// CodeGear C++Builder
// Copyright (c) 1995, 2021 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'Winapi.Devices.Sensors.pas' rev: 34.00 (Windows)

#ifndef Winapi_Devices_SensorsHPP
#define Winapi_Devices_SensorsHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <Winapi.WinRT.hpp>
#include <System.Types.hpp>
#include <System.Win.WinRT.hpp>
#include <Winapi.CommonTypes.hpp>
#include <Winapi.Foundation.hpp>
#include <Winapi.CommonNames.hpp>

//-- user supplied -----------------------------------------------------------

namespace Winapi
{
namespace Devices
{
namespace Sensors
{
//-- forward type declarations -----------------------------------------------
__interface DELPHIINTERFACE IIterator_1__ActivityType_Base;
typedef System::DelphiInterface<IIterator_1__ActivityType_Base> _di_IIterator_1__ActivityType_Base;
__interface DELPHIINTERFACE IIterator_1__ActivityType;
typedef System::DelphiInterface<IIterator_1__ActivityType> _di_IIterator_1__ActivityType;
__interface DELPHIINTERFACE IIterable_1__ActivityType_Base;
typedef System::DelphiInterface<IIterable_1__ActivityType_Base> _di_IIterable_1__ActivityType_Base;
__interface DELPHIINTERFACE IIterable_1__ActivityType;
typedef System::DelphiInterface<IIterable_1__ActivityType> _di_IIterable_1__ActivityType;
__interface DELPHIINTERFACE IVectorView_1__ActivityType;
typedef System::DelphiInterface<IVectorView_1__ActivityType> _di_IVectorView_1__ActivityType;
__interface DELPHIINTERFACE IVector_1__ActivityType;
typedef System::DelphiInterface<IVector_1__ActivityType> _di_IVector_1__ActivityType;
__interface DELPHIINTERFACE ISensorDataThresholdTriggerDetails;
typedef System::DelphiInterface<ISensorDataThresholdTriggerDetails> _di_ISensorDataThresholdTriggerDetails;
__interface DELPHIINTERFACE IAccelerometerDeviceId;
typedef System::DelphiInterface<IAccelerometerDeviceId> _di_IAccelerometerDeviceId;
__interface DELPHIINTERFACE IAccelerometerReading;
typedef System::DelphiInterface<IAccelerometerReading> _di_IAccelerometerReading;
__interface DELPHIINTERFACE IAccelerometerReadingChangedEventArgs;
typedef System::DelphiInterface<IAccelerometerReadingChangedEventArgs> _di_IAccelerometerReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs> _di_TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs;
__interface DELPHIINTERFACE IAccelerometerShakenEventArgs;
typedef System::DelphiInterface<IAccelerometerShakenEventArgs> _di_IAccelerometerShakenEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs_Delegate_Base> _di_TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs> _di_TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs;
__interface DELPHIINTERFACE IAccelerometer;
typedef System::DelphiInterface<IAccelerometer> _di_IAccelerometer;
__interface DELPHIINTERFACE IAccelerometerStatics;
typedef System::DelphiInterface<IAccelerometerStatics> _di_IAccelerometerStatics;
__interface DELPHIINTERFACE IAccelerometerStatics2;
typedef System::DelphiInterface<IAccelerometerStatics2> _di_IAccelerometerStatics2;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IAccelerometer_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IAccelerometer_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IAccelerometer_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IAccelerometer;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IAccelerometer> _di_AsyncOperationCompletedHandler_1__IAccelerometer;
__interface DELPHIINTERFACE IAsyncOperation_1__IAccelerometer_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IAccelerometer_Base> _di_IAsyncOperation_1__IAccelerometer_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IAccelerometer;
typedef System::DelphiInterface<IAsyncOperation_1__IAccelerometer> _di_IAsyncOperation_1__IAccelerometer;
__interface DELPHIINTERFACE IAccelerometerStatics3;
typedef System::DelphiInterface<IAccelerometerStatics3> _di_IAccelerometerStatics3;
__interface DELPHIINTERFACE IAccelerometer2;
typedef System::DelphiInterface<IAccelerometer2> _di_IAccelerometer2;
__interface DELPHIINTERFACE IAccelerometer3;
typedef System::DelphiInterface<IAccelerometer3> _di_IAccelerometer3;
__interface DELPHIINTERFACE IAccelerometer4;
typedef System::DelphiInterface<IAccelerometer4> _di_IAccelerometer4;
__interface DELPHIINTERFACE IAccelerometerReading2;
typedef System::DelphiInterface<IAccelerometerReading2> _di_IAccelerometerReading2;
__interface DELPHIINTERFACE IInclinometerDeviceId;
typedef System::DelphiInterface<IInclinometerDeviceId> _di_IInclinometerDeviceId;
__interface DELPHIINTERFACE IInclinometerReading;
typedef System::DelphiInterface<IInclinometerReading> _di_IInclinometerReading;
__interface DELPHIINTERFACE IInclinometerReadingChangedEventArgs;
typedef System::DelphiInterface<IInclinometerReadingChangedEventArgs> _di_IInclinometerReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs> _di_TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs;
__interface DELPHIINTERFACE IInclinometer;
typedef System::DelphiInterface<IInclinometer> _di_IInclinometer;
__interface DELPHIINTERFACE IInclinometerStatics;
typedef System::DelphiInterface<IInclinometerStatics> _di_IInclinometerStatics;
__interface DELPHIINTERFACE IInclinometerStatics2;
typedef System::DelphiInterface<IInclinometerStatics2> _di_IInclinometerStatics2;
__interface DELPHIINTERFACE IInclinometerStatics3;
typedef System::DelphiInterface<IInclinometerStatics3> _di_IInclinometerStatics3;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IInclinometer_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IInclinometer_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IInclinometer_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IInclinometer;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IInclinometer> _di_AsyncOperationCompletedHandler_1__IInclinometer;
__interface DELPHIINTERFACE IAsyncOperation_1__IInclinometer_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IInclinometer_Base> _di_IAsyncOperation_1__IInclinometer_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IInclinometer;
typedef System::DelphiInterface<IAsyncOperation_1__IInclinometer> _di_IAsyncOperation_1__IInclinometer;
__interface DELPHIINTERFACE IInclinometerStatics4;
typedef System::DelphiInterface<IInclinometerStatics4> _di_IInclinometerStatics4;
__interface DELPHIINTERFACE IInclinometer2;
typedef System::DelphiInterface<IInclinometer2> _di_IInclinometer2;
__interface DELPHIINTERFACE IInclinometer3;
typedef System::DelphiInterface<IInclinometer3> _di_IInclinometer3;
__interface DELPHIINTERFACE IInclinometerReading2;
typedef System::DelphiInterface<IInclinometerReading2> _di_IInclinometerReading2;
__interface DELPHIINTERFACE IInclinometerReadingYawAccuracy;
typedef System::DelphiInterface<IInclinometerReadingYawAccuracy> _di_IInclinometerReadingYawAccuracy;
__interface DELPHIINTERFACE IGyrometerDeviceId;
typedef System::DelphiInterface<IGyrometerDeviceId> _di_IGyrometerDeviceId;
__interface DELPHIINTERFACE IGyrometerReading;
typedef System::DelphiInterface<IGyrometerReading> _di_IGyrometerReading;
__interface DELPHIINTERFACE IGyrometerReadingChangedEventArgs;
typedef System::DelphiInterface<IGyrometerReadingChangedEventArgs> _di_IGyrometerReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs> _di_TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs;
__interface DELPHIINTERFACE IGyrometer;
typedef System::DelphiInterface<IGyrometer> _di_IGyrometer;
__interface DELPHIINTERFACE IGyrometerStatics;
typedef System::DelphiInterface<IGyrometerStatics> _di_IGyrometerStatics;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IGyrometer_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IGyrometer_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IGyrometer_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IGyrometer;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IGyrometer> _di_AsyncOperationCompletedHandler_1__IGyrometer;
__interface DELPHIINTERFACE IAsyncOperation_1__IGyrometer_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IGyrometer_Base> _di_IAsyncOperation_1__IGyrometer_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IGyrometer;
typedef System::DelphiInterface<IAsyncOperation_1__IGyrometer> _di_IAsyncOperation_1__IGyrometer;
__interface DELPHIINTERFACE IGyrometerStatics2;
typedef System::DelphiInterface<IGyrometerStatics2> _di_IGyrometerStatics2;
__interface DELPHIINTERFACE IGyrometer2;
typedef System::DelphiInterface<IGyrometer2> _di_IGyrometer2;
__interface DELPHIINTERFACE IGyrometer3;
typedef System::DelphiInterface<IGyrometer3> _di_IGyrometer3;
__interface DELPHIINTERFACE IGyrometerReading2;
typedef System::DelphiInterface<IGyrometerReading2> _di_IGyrometerReading2;
__interface DELPHIINTERFACE ICompassDeviceId;
typedef System::DelphiInterface<ICompassDeviceId> _di_ICompassDeviceId;
__interface DELPHIINTERFACE ICompassReading;
typedef System::DelphiInterface<ICompassReading> _di_ICompassReading;
__interface DELPHIINTERFACE ICompassReadingChangedEventArgs;
typedef System::DelphiInterface<ICompassReadingChangedEventArgs> _di_ICompassReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs> _di_TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs;
__interface DELPHIINTERFACE ICompass;
typedef System::DelphiInterface<ICompass> _di_ICompass;
__interface DELPHIINTERFACE ICompassStatics;
typedef System::DelphiInterface<ICompassStatics> _di_ICompassStatics;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__ICompass_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__ICompass_Delegate_Base> _di_AsyncOperationCompletedHandler_1__ICompass_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__ICompass;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__ICompass> _di_AsyncOperationCompletedHandler_1__ICompass;
__interface DELPHIINTERFACE IAsyncOperation_1__ICompass_Base;
typedef System::DelphiInterface<IAsyncOperation_1__ICompass_Base> _di_IAsyncOperation_1__ICompass_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__ICompass;
typedef System::DelphiInterface<IAsyncOperation_1__ICompass> _di_IAsyncOperation_1__ICompass;
__interface DELPHIINTERFACE ICompassStatics2;
typedef System::DelphiInterface<ICompassStatics2> _di_ICompassStatics2;
__interface DELPHIINTERFACE ICompass2;
typedef System::DelphiInterface<ICompass2> _di_ICompass2;
__interface DELPHIINTERFACE ICompass3;
typedef System::DelphiInterface<ICompass3> _di_ICompass3;
__interface DELPHIINTERFACE ICompassReading2;
typedef System::DelphiInterface<ICompassReading2> _di_ICompassReading2;
__interface DELPHIINTERFACE ICompassReadingHeadingAccuracy;
typedef System::DelphiInterface<ICompassReadingHeadingAccuracy> _di_ICompassReadingHeadingAccuracy;
__interface DELPHIINTERFACE ILightSensorDeviceId;
typedef System::DelphiInterface<ILightSensorDeviceId> _di_ILightSensorDeviceId;
__interface DELPHIINTERFACE ILightSensorReading;
typedef System::DelphiInterface<ILightSensorReading> _di_ILightSensorReading;
__interface DELPHIINTERFACE ILightSensorReadingChangedEventArgs;
typedef System::DelphiInterface<ILightSensorReadingChangedEventArgs> _di_ILightSensorReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs> _di_TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs;
__interface DELPHIINTERFACE ILightSensor;
typedef System::DelphiInterface<ILightSensor> _di_ILightSensor;
__interface DELPHIINTERFACE ILightSensorStatics;
typedef System::DelphiInterface<ILightSensorStatics> _di_ILightSensorStatics;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__ILightSensor_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__ILightSensor_Delegate_Base> _di_AsyncOperationCompletedHandler_1__ILightSensor_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__ILightSensor;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__ILightSensor> _di_AsyncOperationCompletedHandler_1__ILightSensor;
__interface DELPHIINTERFACE IAsyncOperation_1__ILightSensor_Base;
typedef System::DelphiInterface<IAsyncOperation_1__ILightSensor_Base> _di_IAsyncOperation_1__ILightSensor_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__ILightSensor;
typedef System::DelphiInterface<IAsyncOperation_1__ILightSensor> _di_IAsyncOperation_1__ILightSensor;
__interface DELPHIINTERFACE ILightSensorStatics2;
typedef System::DelphiInterface<ILightSensorStatics2> _di_ILightSensorStatics2;
__interface DELPHIINTERFACE ILightSensor2;
typedef System::DelphiInterface<ILightSensor2> _di_ILightSensor2;
__interface DELPHIINTERFACE ILightSensorReading2;
typedef System::DelphiInterface<ILightSensorReading2> _di_ILightSensorReading2;
__interface DELPHIINTERFACE ISensorRotationMatrix;
typedef System::DelphiInterface<ISensorRotationMatrix> _di_ISensorRotationMatrix;
__interface DELPHIINTERFACE ISensorQuaternion;
typedef System::DelphiInterface<ISensorQuaternion> _di_ISensorQuaternion;
__interface DELPHIINTERFACE IOrientationSensorDeviceId;
typedef System::DelphiInterface<IOrientationSensorDeviceId> _di_IOrientationSensorDeviceId;
__interface DELPHIINTERFACE IOrientationSensorReading;
typedef System::DelphiInterface<IOrientationSensorReading> _di_IOrientationSensorReading;
__interface DELPHIINTERFACE IOrientationSensorReadingChangedEventArgs;
typedef System::DelphiInterface<IOrientationSensorReadingChangedEventArgs> _di_IOrientationSensorReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs> _di_TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs;
__interface DELPHIINTERFACE IOrientationSensor;
typedef System::DelphiInterface<IOrientationSensor> _di_IOrientationSensor;
__interface DELPHIINTERFACE IOrientationSensorStatics;
typedef System::DelphiInterface<IOrientationSensorStatics> _di_IOrientationSensorStatics;
__interface DELPHIINTERFACE IOrientationSensorStatics2;
typedef System::DelphiInterface<IOrientationSensorStatics2> _di_IOrientationSensorStatics2;
__interface DELPHIINTERFACE IOrientationSensorStatics3;
typedef System::DelphiInterface<IOrientationSensorStatics3> _di_IOrientationSensorStatics3;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IOrientationSensor_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IOrientationSensor_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IOrientationSensor_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IOrientationSensor;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IOrientationSensor> _di_AsyncOperationCompletedHandler_1__IOrientationSensor;
__interface DELPHIINTERFACE IAsyncOperation_1__IOrientationSensor_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IOrientationSensor_Base> _di_IAsyncOperation_1__IOrientationSensor_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IOrientationSensor;
typedef System::DelphiInterface<IAsyncOperation_1__IOrientationSensor> _di_IAsyncOperation_1__IOrientationSensor;
__interface DELPHIINTERFACE IOrientationSensorStatics4;
typedef System::DelphiInterface<IOrientationSensorStatics4> _di_IOrientationSensorStatics4;
__interface DELPHIINTERFACE IOrientationSensor2;
typedef System::DelphiInterface<IOrientationSensor2> _di_IOrientationSensor2;
__interface DELPHIINTERFACE IOrientationSensor3;
typedef System::DelphiInterface<IOrientationSensor3> _di_IOrientationSensor3;
__interface DELPHIINTERFACE IOrientationSensorReading2;
typedef System::DelphiInterface<IOrientationSensorReading2> _di_IOrientationSensorReading2;
__interface DELPHIINTERFACE IOrientationSensorReadingYawAccuracy;
typedef System::DelphiInterface<IOrientationSensorReadingYawAccuracy> _di_IOrientationSensorReadingYawAccuracy;
__interface DELPHIINTERFACE ISimpleOrientationSensorDeviceId;
typedef System::DelphiInterface<ISimpleOrientationSensorDeviceId> _di_ISimpleOrientationSensorDeviceId;
__interface DELPHIINTERFACE ISimpleOrientationSensorOrientationChangedEventArgs;
typedef System::DelphiInterface<ISimpleOrientationSensorOrientationChangedEventArgs> _di_ISimpleOrientationSensorOrientationChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs> _di_TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs;
__interface DELPHIINTERFACE ISimpleOrientationSensor;
typedef System::DelphiInterface<ISimpleOrientationSensor> _di_ISimpleOrientationSensor;
__interface DELPHIINTERFACE ISimpleOrientationSensorStatics;
typedef System::DelphiInterface<ISimpleOrientationSensorStatics> _di_ISimpleOrientationSensorStatics;
__interface DELPHIINTERFACE ISimpleOrientationSensor2;
typedef System::DelphiInterface<ISimpleOrientationSensor2> _di_ISimpleOrientationSensor2;
__interface DELPHIINTERFACE IMagnetometerDeviceId;
typedef System::DelphiInterface<IMagnetometerDeviceId> _di_IMagnetometerDeviceId;
__interface DELPHIINTERFACE IMagnetometerReading;
typedef System::DelphiInterface<IMagnetometerReading> _di_IMagnetometerReading;
__interface DELPHIINTERFACE IMagnetometerReadingChangedEventArgs;
typedef System::DelphiInterface<IMagnetometerReadingChangedEventArgs> _di_IMagnetometerReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs> _di_TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs;
__interface DELPHIINTERFACE IMagnetometer;
typedef System::DelphiInterface<IMagnetometer> _di_IMagnetometer;
__interface DELPHIINTERFACE IMagnetometerStatics;
typedef System::DelphiInterface<IMagnetometerStatics> _di_IMagnetometerStatics;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IMagnetometer_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IMagnetometer_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IMagnetometer_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IMagnetometer;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IMagnetometer> _di_AsyncOperationCompletedHandler_1__IMagnetometer;
__interface DELPHIINTERFACE IAsyncOperation_1__IMagnetometer_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IMagnetometer_Base> _di_IAsyncOperation_1__IMagnetometer_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IMagnetometer;
typedef System::DelphiInterface<IAsyncOperation_1__IMagnetometer> _di_IAsyncOperation_1__IMagnetometer;
__interface DELPHIINTERFACE IMagnetometerStatics2;
typedef System::DelphiInterface<IMagnetometerStatics2> _di_IMagnetometerStatics2;
__interface DELPHIINTERFACE IMagnetometer2;
typedef System::DelphiInterface<IMagnetometer2> _di_IMagnetometer2;
__interface DELPHIINTERFACE IMagnetometer3;
typedef System::DelphiInterface<IMagnetometer3> _di_IMagnetometer3;
__interface DELPHIINTERFACE IMagnetometerReading2;
typedef System::DelphiInterface<IMagnetometerReading2> _di_IMagnetometerReading2;
__interface DELPHIINTERFACE IActivitySensorReading;
typedef System::DelphiInterface<IActivitySensorReading> _di_IActivitySensorReading;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IActivitySensorReading_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IActivitySensorReading_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IActivitySensorReading_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IActivitySensorReading;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IActivitySensorReading> _di_AsyncOperationCompletedHandler_1__IActivitySensorReading;
__interface DELPHIINTERFACE IAsyncOperation_1__IActivitySensorReading_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IActivitySensorReading_Base> _di_IAsyncOperation_1__IActivitySensorReading_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IActivitySensorReading;
typedef System::DelphiInterface<IAsyncOperation_1__IActivitySensorReading> _di_IAsyncOperation_1__IActivitySensorReading;
__interface DELPHIINTERFACE IActivitySensorReadingChangedEventArgs;
typedef System::DelphiInterface<IActivitySensorReadingChangedEventArgs> _di_IActivitySensorReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs> _di_TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs;
__interface DELPHIINTERFACE IActivitySensor;
typedef System::DelphiInterface<IActivitySensor> _di_IActivitySensor;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IActivitySensor_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IActivitySensor_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IActivitySensor_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IActivitySensor;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IActivitySensor> _di_AsyncOperationCompletedHandler_1__IActivitySensor;
__interface DELPHIINTERFACE IAsyncOperation_1__IActivitySensor_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IActivitySensor_Base> _di_IAsyncOperation_1__IActivitySensor_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IActivitySensor;
typedef System::DelphiInterface<IAsyncOperation_1__IActivitySensor> _di_IAsyncOperation_1__IActivitySensor;
__interface DELPHIINTERFACE IIterator_1__IActivitySensorReading_Base;
typedef System::DelphiInterface<IIterator_1__IActivitySensorReading_Base> _di_IIterator_1__IActivitySensorReading_Base;
__interface DELPHIINTERFACE IIterator_1__IActivitySensorReading;
typedef System::DelphiInterface<IIterator_1__IActivitySensorReading> _di_IIterator_1__IActivitySensorReading;
__interface DELPHIINTERFACE IIterable_1__IActivitySensorReading_Base;
typedef System::DelphiInterface<IIterable_1__IActivitySensorReading_Base> _di_IIterable_1__IActivitySensorReading_Base;
__interface DELPHIINTERFACE IIterable_1__IActivitySensorReading;
typedef System::DelphiInterface<IIterable_1__IActivitySensorReading> _di_IIterable_1__IActivitySensorReading;
__interface DELPHIINTERFACE IVectorView_1__IActivitySensorReading;
typedef System::DelphiInterface<IVectorView_1__IActivitySensorReading> _di_IVectorView_1__IActivitySensorReading;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading> _di_AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading;
__interface DELPHIINTERFACE IAsyncOperation_1__IVectorView_1__IActivitySensorReading_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IVectorView_1__IActivitySensorReading_Base> _di_IAsyncOperation_1__IVectorView_1__IActivitySensorReading_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IVectorView_1__IActivitySensorReading;
typedef System::DelphiInterface<IAsyncOperation_1__IVectorView_1__IActivitySensorReading> _di_IAsyncOperation_1__IVectorView_1__IActivitySensorReading;
__interface DELPHIINTERFACE IActivitySensorStatics;
typedef System::DelphiInterface<IActivitySensorStatics> _di_IActivitySensorStatics;
__interface DELPHIINTERFACE IActivitySensorReadingChangeReport;
typedef System::DelphiInterface<IActivitySensorReadingChangeReport> _di_IActivitySensorReadingChangeReport;
__interface DELPHIINTERFACE IIterator_1__IActivitySensorReadingChangeReport_Base;
typedef System::DelphiInterface<IIterator_1__IActivitySensorReadingChangeReport_Base> _di_IIterator_1__IActivitySensorReadingChangeReport_Base;
__interface DELPHIINTERFACE IIterator_1__IActivitySensorReadingChangeReport;
typedef System::DelphiInterface<IIterator_1__IActivitySensorReadingChangeReport> _di_IIterator_1__IActivitySensorReadingChangeReport;
__interface DELPHIINTERFACE IIterable_1__IActivitySensorReadingChangeReport_Base;
typedef System::DelphiInterface<IIterable_1__IActivitySensorReadingChangeReport_Base> _di_IIterable_1__IActivitySensorReadingChangeReport_Base;
__interface DELPHIINTERFACE IIterable_1__IActivitySensorReadingChangeReport;
typedef System::DelphiInterface<IIterable_1__IActivitySensorReadingChangeReport> _di_IIterable_1__IActivitySensorReadingChangeReport;
__interface DELPHIINTERFACE IVectorView_1__IActivitySensorReadingChangeReport;
typedef System::DelphiInterface<IVectorView_1__IActivitySensorReadingChangeReport> _di_IVectorView_1__IActivitySensorReadingChangeReport;
__interface DELPHIINTERFACE IBarometerReading;
typedef System::DelphiInterface<IBarometerReading> _di_IBarometerReading;
__interface DELPHIINTERFACE IBarometerReadingChangedEventArgs;
typedef System::DelphiInterface<IBarometerReadingChangedEventArgs> _di_IBarometerReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs> _di_TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs;
__interface DELPHIINTERFACE IBarometer;
typedef System::DelphiInterface<IBarometer> _di_IBarometer;
__interface DELPHIINTERFACE IBarometerStatics;
typedef System::DelphiInterface<IBarometerStatics> _di_IBarometerStatics;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IBarometer_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IBarometer_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IBarometer_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IBarometer;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IBarometer> _di_AsyncOperationCompletedHandler_1__IBarometer;
__interface DELPHIINTERFACE IAsyncOperation_1__IBarometer_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IBarometer_Base> _di_IAsyncOperation_1__IBarometer_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IBarometer;
typedef System::DelphiInterface<IAsyncOperation_1__IBarometer> _di_IAsyncOperation_1__IBarometer;
__interface DELPHIINTERFACE IBarometerStatics2;
typedef System::DelphiInterface<IBarometerStatics2> _di_IBarometerStatics2;
__interface DELPHIINTERFACE IBarometer2;
typedef System::DelphiInterface<IBarometer2> _di_IBarometer2;
__interface DELPHIINTERFACE IBarometerReading2;
typedef System::DelphiInterface<IBarometerReading2> _di_IBarometerReading2;
__interface DELPHIINTERFACE IPedometerReading;
typedef System::DelphiInterface<IPedometerReading> _di_IPedometerReading;
__interface DELPHIINTERFACE IPedometerReadingChangedEventArgs;
typedef System::DelphiInterface<IPedometerReadingChangedEventArgs> _di_IPedometerReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs> _di_TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs;
__interface DELPHIINTERFACE IPedometer;
typedef System::DelphiInterface<IPedometer> _di_IPedometer;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IPedometer_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IPedometer_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IPedometer_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IPedometer;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IPedometer> _di_AsyncOperationCompletedHandler_1__IPedometer;
__interface DELPHIINTERFACE IAsyncOperation_1__IPedometer_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IPedometer_Base> _di_IAsyncOperation_1__IPedometer_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IPedometer;
typedef System::DelphiInterface<IAsyncOperation_1__IPedometer> _di_IAsyncOperation_1__IPedometer;
__interface DELPHIINTERFACE IIterator_1__IPedometerReading_Base;
typedef System::DelphiInterface<IIterator_1__IPedometerReading_Base> _di_IIterator_1__IPedometerReading_Base;
__interface DELPHIINTERFACE IIterator_1__IPedometerReading;
typedef System::DelphiInterface<IIterator_1__IPedometerReading> _di_IIterator_1__IPedometerReading;
__interface DELPHIINTERFACE IIterable_1__IPedometerReading_Base;
typedef System::DelphiInterface<IIterable_1__IPedometerReading_Base> _di_IIterable_1__IPedometerReading_Base;
__interface DELPHIINTERFACE IIterable_1__IPedometerReading;
typedef System::DelphiInterface<IIterable_1__IPedometerReading> _di_IIterable_1__IPedometerReading;
__interface DELPHIINTERFACE IVectorView_1__IPedometerReading;
typedef System::DelphiInterface<IVectorView_1__IPedometerReading> _di_IVectorView_1__IPedometerReading;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading_Delegate_Base> _di_AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading> _di_AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading;
__interface DELPHIINTERFACE IAsyncOperation_1__IVectorView_1__IPedometerReading_Base;
typedef System::DelphiInterface<IAsyncOperation_1__IVectorView_1__IPedometerReading_Base> _di_IAsyncOperation_1__IVectorView_1__IPedometerReading_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__IVectorView_1__IPedometerReading;
typedef System::DelphiInterface<IAsyncOperation_1__IVectorView_1__IPedometerReading> _di_IAsyncOperation_1__IVectorView_1__IPedometerReading;
__interface DELPHIINTERFACE IPedometerStatics;
typedef System::DelphiInterface<IPedometerStatics> _di_IPedometerStatics;
__interface DELPHIINTERFACE IPedometerStatics2;
typedef System::DelphiInterface<IPedometerStatics2> _di_IPedometerStatics2;
__interface DELPHIINTERFACE IKeyValuePair_2__PedometerStepKind__IPedometerReading;
typedef System::DelphiInterface<IKeyValuePair_2__PedometerStepKind__IPedometerReading> _di_IKeyValuePair_2__PedometerStepKind__IPedometerReading;
__interface DELPHIINTERFACE IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base;
typedef System::DelphiInterface<IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base> _di_IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base;
__interface DELPHIINTERFACE IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading;
typedef System::DelphiInterface<IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading> _di_IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading;
__interface DELPHIINTERFACE IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base;
typedef System::DelphiInterface<IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base> _di_IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base;
__interface DELPHIINTERFACE IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading;
typedef System::DelphiInterface<IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading> _di_IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading;
__interface DELPHIINTERFACE IMapView_2__PedometerStepKind__IPedometerReading_Base;
typedef System::DelphiInterface<IMapView_2__PedometerStepKind__IPedometerReading_Base> _di_IMapView_2__PedometerStepKind__IPedometerReading_Base;
__interface DELPHIINTERFACE IMapView_2__PedometerStepKind__IPedometerReading;
typedef System::DelphiInterface<IMapView_2__PedometerStepKind__IPedometerReading> _di_IMapView_2__PedometerStepKind__IPedometerReading;
__interface DELPHIINTERFACE IPedometer2;
typedef System::DelphiInterface<IPedometer2> _di_IPedometer2;
__interface DELPHIINTERFACE IProximitySensorReading;
typedef System::DelphiInterface<IProximitySensorReading> _di_IProximitySensorReading;
__interface DELPHIINTERFACE IProximitySensorReadingChangedEventArgs;
typedef System::DelphiInterface<IProximitySensorReadingChangedEventArgs> _di_IProximitySensorReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs> _di_TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs;
__interface DELPHIINTERFACE IProximitySensor;
typedef System::DelphiInterface<IProximitySensor> _di_IProximitySensor;
__interface DELPHIINTERFACE IProximitySensorStatics;
typedef System::DelphiInterface<IProximitySensorStatics> _di_IProximitySensorStatics;
__interface DELPHIINTERFACE IIterator_1__IProximitySensorReading_Base;
typedef System::DelphiInterface<IIterator_1__IProximitySensorReading_Base> _di_IIterator_1__IProximitySensorReading_Base;
__interface DELPHIINTERFACE IIterator_1__IProximitySensorReading;
typedef System::DelphiInterface<IIterator_1__IProximitySensorReading> _di_IIterator_1__IProximitySensorReading;
__interface DELPHIINTERFACE IIterable_1__IProximitySensorReading_Base;
typedef System::DelphiInterface<IIterable_1__IProximitySensorReading_Base> _di_IIterable_1__IProximitySensorReading_Base;
__interface DELPHIINTERFACE IIterable_1__IProximitySensorReading;
typedef System::DelphiInterface<IIterable_1__IProximitySensorReading> _di_IIterable_1__IProximitySensorReading;
__interface DELPHIINTERFACE IVectorView_1__IProximitySensorReading;
typedef System::DelphiInterface<IVectorView_1__IProximitySensorReading> _di_IVectorView_1__IProximitySensorReading;
__interface DELPHIINTERFACE IProximitySensorStatics2;
typedef System::DelphiInterface<IProximitySensorStatics2> _di_IProximitySensorStatics2;
__interface DELPHIINTERFACE IAltimeterReading;
typedef System::DelphiInterface<IAltimeterReading> _di_IAltimeterReading;
__interface DELPHIINTERFACE IAltimeterReadingChangedEventArgs;
typedef System::DelphiInterface<IAltimeterReadingChangedEventArgs> _di_IAltimeterReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs> _di_TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs;
__interface DELPHIINTERFACE IAltimeter;
typedef System::DelphiInterface<IAltimeter> _di_IAltimeter;
__interface DELPHIINTERFACE IAltimeterStatics;
typedef System::DelphiInterface<IAltimeterStatics> _di_IAltimeterStatics;
__interface DELPHIINTERFACE IAltimeter2;
typedef System::DelphiInterface<IAltimeter2> _di_IAltimeter2;
__interface DELPHIINTERFACE IAltimeterReading2;
typedef System::DelphiInterface<IAltimeterReading2> _di_IAltimeterReading2;
__interface DELPHIINTERFACE Custom_ICustomSensorReading;
typedef System::DelphiInterface<Custom_ICustomSensorReading> _di_Custom_ICustomSensorReading;
__interface DELPHIINTERFACE Custom_ICustomSensorReadingChangedEventArgs;
typedef System::DelphiInterface<Custom_ICustomSensorReadingChangedEventArgs> _di_Custom_ICustomSensorReadingChangedEventArgs;
__interface DELPHIINTERFACE TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs_Delegate_Base;
typedef System::DelphiInterface<TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs_Delegate_Base> _di_TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs_Delegate_Base;
__interface DELPHIINTERFACE TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs;
typedef System::DelphiInterface<TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs> _di_TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs;
__interface DELPHIINTERFACE Custom_ICustomSensor;
typedef System::DelphiInterface<Custom_ICustomSensor> _di_Custom_ICustomSensor;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__Custom_ICustomSensor_Delegate_Base;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__Custom_ICustomSensor_Delegate_Base> _di_AsyncOperationCompletedHandler_1__Custom_ICustomSensor_Delegate_Base;
__interface DELPHIINTERFACE AsyncOperationCompletedHandler_1__Custom_ICustomSensor;
typedef System::DelphiInterface<AsyncOperationCompletedHandler_1__Custom_ICustomSensor> _di_AsyncOperationCompletedHandler_1__Custom_ICustomSensor;
__interface DELPHIINTERFACE IAsyncOperation_1__Custom_ICustomSensor_Base;
typedef System::DelphiInterface<IAsyncOperation_1__Custom_ICustomSensor_Base> _di_IAsyncOperation_1__Custom_ICustomSensor_Base;
__interface DELPHIINTERFACE IAsyncOperation_1__Custom_ICustomSensor;
typedef System::DelphiInterface<IAsyncOperation_1__Custom_ICustomSensor> _di_IAsyncOperation_1__Custom_ICustomSensor;
__interface DELPHIINTERFACE Custom_ICustomSensorStatics;
typedef System::DelphiInterface<Custom_ICustomSensorStatics> _di_Custom_ICustomSensorStatics;
__interface DELPHIINTERFACE Custom_ICustomSensor2;
typedef System::DelphiInterface<Custom_ICustomSensor2> _di_Custom_ICustomSensor2;
__interface DELPHIINTERFACE Custom_ICustomSensorReading2;
typedef System::DelphiInterface<Custom_ICustomSensorReading2> _di_Custom_ICustomSensorReading2;
class DELPHICLASS TAccelerometer;
class DELPHICLASS TInclinometer;
class DELPHICLASS TGyrometer;
class DELPHICLASS TCompass;
class DELPHICLASS TLightSensor;
class DELPHICLASS TOrientationSensor;
class DELPHICLASS TSimpleOrientationSensor;
class DELPHICLASS TMagnetometer;
class DELPHICLASS TActivitySensor;
class DELPHICLASS TBarometer;
class DELPHICLASS TPedometer;
class DELPHICLASS TProximitySensor;
class DELPHICLASS TAltimeter;
class DELPHICLASS TCustom_CustomSensor;
//-- type declarations -------------------------------------------------------
typedef _di_IIterator_1__ActivityType *PIIterator_1__ActivityType;

typedef _di_IIterable_1__ActivityType *PIIterable_1__ActivityType;

typedef _di_IVectorView_1__ActivityType *PIVectorView_1__ActivityType;

typedef _di_IVector_1__ActivityType *PIVector_1__ActivityType;

typedef _di_ISensorDataThresholdTriggerDetails *PISensorDataThresholdTriggerDetails;

typedef _di_IAccelerometerDeviceId *PIAccelerometerDeviceId;

typedef _di_IAccelerometerReading *PIAccelerometerReading;

typedef _di_IAccelerometerReadingChangedEventArgs *PIAccelerometerReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs *PTypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs;

typedef _di_IAccelerometerShakenEventArgs *PIAccelerometerShakenEventArgs;

typedef _di_TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs *PTypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs;

typedef _di_IAccelerometer *PIAccelerometer;

typedef _di_IAccelerometerStatics *PIAccelerometerStatics;

typedef _di_IAccelerometerStatics2 *PIAccelerometerStatics2;

typedef _di_AsyncOperationCompletedHandler_1__IAccelerometer *PAsyncOperationCompletedHandler_1__IAccelerometer;

typedef _di_IAsyncOperation_1__IAccelerometer *PIAsyncOperation_1__IAccelerometer;

typedef _di_IAccelerometerStatics3 *PIAccelerometerStatics3;

typedef _di_IAccelerometer2 *PIAccelerometer2;

typedef _di_IAccelerometer3 *PIAccelerometer3;

typedef _di_IAccelerometer4 *PIAccelerometer4;

typedef _di_IAccelerometerReading2 *PIAccelerometerReading2;

typedef _di_IInclinometerDeviceId *PIInclinometerDeviceId;

typedef _di_IInclinometerReading *PIInclinometerReading;

typedef _di_IInclinometerReadingChangedEventArgs *PIInclinometerReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs *PTypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs;

typedef _di_IInclinometer *PIInclinometer;

typedef _di_IInclinometerStatics *PIInclinometerStatics;

typedef _di_IInclinometerStatics2 *PIInclinometerStatics2;

typedef _di_IInclinometerStatics3 *PIInclinometerStatics3;

typedef _di_AsyncOperationCompletedHandler_1__IInclinometer *PAsyncOperationCompletedHandler_1__IInclinometer;

typedef _di_IAsyncOperation_1__IInclinometer *PIAsyncOperation_1__IInclinometer;

typedef _di_IInclinometerStatics4 *PIInclinometerStatics4;

typedef _di_IInclinometer2 *PIInclinometer2;

typedef _di_IInclinometer3 *PIInclinometer3;

typedef _di_IInclinometerReading2 *PIInclinometerReading2;

typedef _di_IInclinometerReadingYawAccuracy *PIInclinometerReadingYawAccuracy;

typedef _di_IGyrometerDeviceId *PIGyrometerDeviceId;

typedef _di_IGyrometerReading *PIGyrometerReading;

typedef _di_IGyrometerReadingChangedEventArgs *PIGyrometerReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs *PTypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs;

typedef _di_IGyrometer *PIGyrometer;

typedef _di_IGyrometerStatics *PIGyrometerStatics;

typedef _di_AsyncOperationCompletedHandler_1__IGyrometer *PAsyncOperationCompletedHandler_1__IGyrometer;

typedef _di_IAsyncOperation_1__IGyrometer *PIAsyncOperation_1__IGyrometer;

typedef _di_IGyrometerStatics2 *PIGyrometerStatics2;

typedef _di_IGyrometer2 *PIGyrometer2;

typedef _di_IGyrometer3 *PIGyrometer3;

typedef _di_IGyrometerReading2 *PIGyrometerReading2;

typedef _di_ICompassDeviceId *PICompassDeviceId;

typedef _di_ICompassReading *PICompassReading;

typedef _di_ICompassReadingChangedEventArgs *PICompassReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs *PTypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs;

typedef _di_ICompass *PICompass;

typedef _di_ICompassStatics *PICompassStatics;

typedef _di_AsyncOperationCompletedHandler_1__ICompass *PAsyncOperationCompletedHandler_1__ICompass;

typedef _di_IAsyncOperation_1__ICompass *PIAsyncOperation_1__ICompass;

typedef _di_ICompassStatics2 *PICompassStatics2;

typedef _di_ICompass2 *PICompass2;

typedef _di_ICompass3 *PICompass3;

typedef _di_ICompassReading2 *PICompassReading2;

typedef _di_ICompassReadingHeadingAccuracy *PICompassReadingHeadingAccuracy;

typedef _di_ILightSensorDeviceId *PILightSensorDeviceId;

typedef _di_ILightSensorReading *PILightSensorReading;

typedef _di_ILightSensorReadingChangedEventArgs *PILightSensorReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs *PTypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs;

typedef _di_ILightSensor *PILightSensor;

typedef _di_ILightSensorStatics *PILightSensorStatics;

typedef _di_AsyncOperationCompletedHandler_1__ILightSensor *PAsyncOperationCompletedHandler_1__ILightSensor;

typedef _di_IAsyncOperation_1__ILightSensor *PIAsyncOperation_1__ILightSensor;

typedef _di_ILightSensorStatics2 *PILightSensorStatics2;

typedef _di_ILightSensor2 *PILightSensor2;

typedef _di_ILightSensorReading2 *PILightSensorReading2;

typedef _di_ISensorRotationMatrix *PISensorRotationMatrix;

typedef _di_ISensorQuaternion *PISensorQuaternion;

typedef _di_IOrientationSensorDeviceId *PIOrientationSensorDeviceId;

typedef _di_IOrientationSensorReading *PIOrientationSensorReading;

typedef _di_IOrientationSensorReadingChangedEventArgs *PIOrientationSensorReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs *PTypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs;

typedef _di_IOrientationSensor *PIOrientationSensor;

typedef _di_IOrientationSensorStatics *PIOrientationSensorStatics;

typedef _di_IOrientationSensorStatics2 *PIOrientationSensorStatics2;

typedef _di_IOrientationSensorStatics3 *PIOrientationSensorStatics3;

typedef _di_AsyncOperationCompletedHandler_1__IOrientationSensor *PAsyncOperationCompletedHandler_1__IOrientationSensor;

typedef _di_IAsyncOperation_1__IOrientationSensor *PIAsyncOperation_1__IOrientationSensor;

typedef _di_IOrientationSensorStatics4 *PIOrientationSensorStatics4;

typedef _di_IOrientationSensor2 *PIOrientationSensor2;

typedef _di_IOrientationSensor3 *PIOrientationSensor3;

typedef _di_IOrientationSensorReading2 *PIOrientationSensorReading2;

typedef _di_IOrientationSensorReadingYawAccuracy *PIOrientationSensorReadingYawAccuracy;

typedef _di_ISimpleOrientationSensorDeviceId *PISimpleOrientationSensorDeviceId;

typedef _di_ISimpleOrientationSensorOrientationChangedEventArgs *PISimpleOrientationSensorOrientationChangedEventArgs;

typedef _di_TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs *PTypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs;

typedef _di_ISimpleOrientationSensor *PISimpleOrientationSensor;

typedef _di_ISimpleOrientationSensorStatics *PISimpleOrientationSensorStatics;

typedef _di_ISimpleOrientationSensor2 *PISimpleOrientationSensor2;

typedef _di_IMagnetometerDeviceId *PIMagnetometerDeviceId;

typedef _di_IMagnetometerReading *PIMagnetometerReading;

typedef _di_IMagnetometerReadingChangedEventArgs *PIMagnetometerReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs *PTypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs;

typedef _di_IMagnetometer *PIMagnetometer;

typedef _di_IMagnetometerStatics *PIMagnetometerStatics;

typedef _di_AsyncOperationCompletedHandler_1__IMagnetometer *PAsyncOperationCompletedHandler_1__IMagnetometer;

typedef _di_IAsyncOperation_1__IMagnetometer *PIAsyncOperation_1__IMagnetometer;

typedef _di_IMagnetometerStatics2 *PIMagnetometerStatics2;

typedef _di_IMagnetometer2 *PIMagnetometer2;

typedef _di_IMagnetometer3 *PIMagnetometer3;

typedef _di_IMagnetometerReading2 *PIMagnetometerReading2;

typedef _di_IActivitySensorReading *PIActivitySensorReading;

typedef _di_AsyncOperationCompletedHandler_1__IActivitySensorReading *PAsyncOperationCompletedHandler_1__IActivitySensorReading;

typedef _di_IAsyncOperation_1__IActivitySensorReading *PIAsyncOperation_1__IActivitySensorReading;

typedef _di_IActivitySensorReadingChangedEventArgs *PIActivitySensorReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs *PTypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs;

typedef _di_IActivitySensor *PIActivitySensor;

typedef _di_AsyncOperationCompletedHandler_1__IActivitySensor *PAsyncOperationCompletedHandler_1__IActivitySensor;

typedef _di_IAsyncOperation_1__IActivitySensor *PIAsyncOperation_1__IActivitySensor;

typedef _di_IIterator_1__IActivitySensorReading *PIIterator_1__IActivitySensorReading;

typedef _di_IIterable_1__IActivitySensorReading *PIIterable_1__IActivitySensorReading;

typedef _di_IVectorView_1__IActivitySensorReading *PIVectorView_1__IActivitySensorReading;

typedef _di_AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading *PAsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading;

typedef _di_IAsyncOperation_1__IVectorView_1__IActivitySensorReading *PIAsyncOperation_1__IVectorView_1__IActivitySensorReading;

typedef _di_IActivitySensorStatics *PIActivitySensorStatics;

typedef _di_IActivitySensorReadingChangeReport *PIActivitySensorReadingChangeReport;

typedef _di_IIterator_1__IActivitySensorReadingChangeReport *PIIterator_1__IActivitySensorReadingChangeReport;

typedef _di_IIterable_1__IActivitySensorReadingChangeReport *PIIterable_1__IActivitySensorReadingChangeReport;

typedef _di_IVectorView_1__IActivitySensorReadingChangeReport *PIVectorView_1__IActivitySensorReadingChangeReport;

typedef _di_IBarometerReading *PIBarometerReading;

typedef _di_IBarometerReadingChangedEventArgs *PIBarometerReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs *PTypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs;

typedef _di_IBarometer *PIBarometer;

typedef _di_IBarometerStatics *PIBarometerStatics;

typedef _di_AsyncOperationCompletedHandler_1__IBarometer *PAsyncOperationCompletedHandler_1__IBarometer;

typedef _di_IAsyncOperation_1__IBarometer *PIAsyncOperation_1__IBarometer;

typedef _di_IBarometerStatics2 *PIBarometerStatics2;

typedef _di_IBarometer2 *PIBarometer2;

typedef _di_IBarometerReading2 *PIBarometerReading2;

typedef _di_IPedometerReading *PIPedometerReading;

typedef _di_IPedometerReadingChangedEventArgs *PIPedometerReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs *PTypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs;

typedef _di_IPedometer *PIPedometer;

typedef _di_AsyncOperationCompletedHandler_1__IPedometer *PAsyncOperationCompletedHandler_1__IPedometer;

typedef _di_IAsyncOperation_1__IPedometer *PIAsyncOperation_1__IPedometer;

typedef _di_IIterator_1__IPedometerReading *PIIterator_1__IPedometerReading;

typedef _di_IIterable_1__IPedometerReading *PIIterable_1__IPedometerReading;

typedef _di_IVectorView_1__IPedometerReading *PIVectorView_1__IPedometerReading;

typedef _di_AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading *PAsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading;

typedef _di_IAsyncOperation_1__IVectorView_1__IPedometerReading *PIAsyncOperation_1__IVectorView_1__IPedometerReading;

typedef _di_IPedometerStatics *PIPedometerStatics;

typedef _di_IPedometerStatics2 *PIPedometerStatics2;

typedef _di_IKeyValuePair_2__PedometerStepKind__IPedometerReading *PIKeyValuePair_2__PedometerStepKind__IPedometerReading;

typedef _di_IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading *PIIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading;

typedef _di_IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading *PIIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading;

typedef _di_IMapView_2__PedometerStepKind__IPedometerReading *PIMapView_2__PedometerStepKind__IPedometerReading;

typedef _di_IPedometer2 *PIPedometer2;

typedef _di_IProximitySensorReading *PIProximitySensorReading;

typedef _di_IProximitySensorReadingChangedEventArgs *PIProximitySensorReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs *PTypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs;

typedef _di_IProximitySensor *PIProximitySensor;

typedef _di_IProximitySensorStatics *PIProximitySensorStatics;

typedef _di_IIterator_1__IProximitySensorReading *PIIterator_1__IProximitySensorReading;

typedef _di_IIterable_1__IProximitySensorReading *PIIterable_1__IProximitySensorReading;

typedef _di_IVectorView_1__IProximitySensorReading *PIVectorView_1__IProximitySensorReading;

typedef _di_IProximitySensorStatics2 *PIProximitySensorStatics2;

typedef _di_IAltimeterReading *PIAltimeterReading;

typedef _di_IAltimeterReadingChangedEventArgs *PIAltimeterReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs *PTypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs;

typedef _di_IAltimeter *PIAltimeter;

typedef _di_IAltimeterStatics *PIAltimeterStatics;

typedef _di_IAltimeter2 *PIAltimeter2;

typedef _di_IAltimeterReading2 *PIAltimeterReading2;

typedef _di_Custom_ICustomSensorReading *PCustom_ICustomSensorReading;

typedef _di_Custom_ICustomSensorReadingChangedEventArgs *PCustom_ICustomSensorReadingChangedEventArgs;

typedef _di_TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs *PTypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs;

typedef _di_Custom_ICustomSensor *PCustom_ICustomSensor;

typedef _di_AsyncOperationCompletedHandler_1__Custom_ICustomSensor *PAsyncOperationCompletedHandler_1__Custom_ICustomSensor;

typedef _di_IAsyncOperation_1__Custom_ICustomSensor *PIAsyncOperation_1__Custom_ICustomSensor;

typedef _di_Custom_ICustomSensorStatics *PCustom_ICustomSensorStatics;

typedef _di_Custom_ICustomSensor2 *PCustom_ICustomSensor2;

typedef _di_Custom_ICustomSensorReading2 *PCustom_ICustomSensorReading2;

__interface  INTERFACE_UUID("{40524281-A7C6-50B1-B6F5-0BAA95D902C2}") IIterator_1__ActivityType_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{752850B9-5ED2-5655-8DE2-262EFC26CF39}") IIterator_1__ActivityType  : public IIterator_1__ActivityType_Base 
{
	virtual HRESULT __safecall get_Current(Winapi::Commontypes::ActivityType &__get_Current_result) = 0 ;
	virtual HRESULT __safecall get_HasCurrent(bool &__get_HasCurrent_result) = 0 ;
	virtual HRESULT __safecall MoveNext(bool &__MoveNext_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned itemsSize, Winapi::Commontypes::PActivityType items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::ActivityType _scw_get_Current() { Winapi::Commontypes::ActivityType __r; HRESULT __hr = get_Current(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::ActivityType Current = {read=_scw_get_Current};
	#pragma option push -w-inl
	/* safecall wrapper */ inline bool _scw_get_HasCurrent() { bool __r; HRESULT __hr = get_HasCurrent(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property bool HasCurrent = {read=_scw_get_HasCurrent};
};

__interface  INTERFACE_UUID("{2A04CDFA-5DFD-5178-8731-ADE998E4A7F6}") IIterable_1__ActivityType_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{1B6614A1-8FC5-567D-9157-410A9E0ECBC5}") IIterable_1__ActivityType  : public IIterable_1__ActivityType_Base 
{
	virtual HRESULT __safecall First(_di_IIterator_1__ActivityType &__First_result) = 0 ;
};

__interface  INTERFACE_UUID("{86D0B56E-CB4E-58F0-B9A2-1528619DCD26}") IVectorView_1__ActivityType  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetAt(unsigned index, Winapi::Commontypes::ActivityType &__GetAt_result) = 0 ;
	virtual HRESULT __safecall get_Size(unsigned &__get_Size_result) = 0 ;
	virtual HRESULT __safecall IndexOf(Winapi::Commontypes::ActivityType value, /* out */ unsigned &index, bool &__IndexOf_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned startIndex, unsigned itemsSize, Winapi::Commontypes::PActivityType items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_Size() { unsigned __r; HRESULT __hr = get_Size(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned Size = {read=_scw_get_Size};
};

__interface  INTERFACE_UUID("{A4739064-B54E-55D4-8012-317E2B6A807B}") IVector_1__ActivityType  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetAt(unsigned index, Winapi::Commontypes::ActivityType &__GetAt_result) = 0 ;
	virtual HRESULT __safecall get_Size(unsigned &__get_Size_result) = 0 ;
	virtual HRESULT __safecall GetView(_di_IVectorView_1__ActivityType &__GetView_result) = 0 ;
	virtual HRESULT __safecall IndexOf(Winapi::Commontypes::ActivityType value, /* out */ unsigned &index, bool &__IndexOf_result) = 0 ;
	virtual HRESULT __safecall SetAt(unsigned index, Winapi::Commontypes::ActivityType value) = 0 ;
	virtual HRESULT __safecall InsertAt(unsigned index, Winapi::Commontypes::ActivityType value) = 0 ;
	virtual HRESULT __safecall RemoveAt(unsigned index) = 0 ;
	virtual HRESULT __safecall Append(Winapi::Commontypes::ActivityType value) = 0 ;
	virtual HRESULT __safecall RemoveAtEnd() = 0 ;
	virtual HRESULT __safecall Clear() = 0 ;
	virtual HRESULT __safecall GetMany(unsigned startIndex, unsigned itemsSize, Winapi::Commontypes::PActivityType items, unsigned &__GetMany_result) = 0 ;
	virtual HRESULT __safecall ReplaceAll(unsigned itemsSize, Winapi::Commontypes::PActivityType items) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_Size() { unsigned __r; HRESULT __hr = get_Size(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned Size = {read=_scw_get_Size};
};

__interface  INTERFACE_UUID("{9106F1B7-E88D-48B1-BC90-619C7B349391}") ISensorDataThresholdTriggerDetails  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	virtual HRESULT __safecall get_SensorType(Winapi::Commontypes::SensorType &__get_SensorType_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::SensorType _scw_get_SensorType() { Winapi::Commontypes::SensorType __r; HRESULT __hr = get_SensorType(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::SensorType SensorType = {read=_scw_get_SensorType};
};

__interface  INTERFACE_UUID("{7EAC64A9-97D5-446D-AB5A-917DF9B96A2C}") IAccelerometerDeviceId  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
};

__interface  INTERFACE_UUID("{B9FE7ACB-D351-40AF-8BB6-7AA9AE641FB7}") IAccelerometerReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_AccelerationX(double &__get_AccelerationX_result) = 0 ;
	virtual HRESULT __safecall get_AccelerationY(double &__get_AccelerationY_result) = 0 ;
	virtual HRESULT __safecall get_AccelerationZ(double &__get_AccelerationZ_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_AccelerationX() { double __r; HRESULT __hr = get_AccelerationX(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double AccelerationX = {read=_scw_get_AccelerationX};
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_AccelerationY() { double __r; HRESULT __hr = get_AccelerationY(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double AccelerationY = {read=_scw_get_AccelerationY};
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_AccelerationZ() { double __r; HRESULT __hr = get_AccelerationZ(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double AccelerationZ = {read=_scw_get_AccelerationZ};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{0095C65B-B6AC-475A-9F44-8B32D35A3F25}") IAccelerometerReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IAccelerometerReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IAccelerometerReading _scw_get_Reading() { _di_IAccelerometerReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IAccelerometerReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{A5E83E40-B597-5B83-92F5-5BED3926CA80}") TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{9D20AAA1-647B-56D4-B668-0B6002475AB4}") TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs  : public TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAccelerometer sender, _di_IAccelerometerReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{95FF01D1-4A28-4F35-98E8-8178AAE4084A}") IAccelerometerShakenEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{3E5D6EAF-F169-5D60-92B0-98CD6BD8F808}") TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{ED8C9EE8-1DB6-55E3-BE0B-25B5B8476431}") TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs  : public TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAccelerometer sender, _di_IAccelerometerShakenEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{DF184548-2711-4DA7-8098-4B82205D3C7D}") IAccelerometer  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_IAccelerometerReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IAccelerometer__IAccelerometerReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	virtual HRESULT __safecall add_Shaken(_di_TypedEventHandler_2__IAccelerometer__IAccelerometerShakenEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_Shaken_result) = 0 ;
	virtual HRESULT __safecall remove_Shaken(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{A5E28B74-5A87-4A2D-BECC-0F906EA061DD}") IAccelerometerStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_IAccelerometer &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{C4C4842F-D86B-4685-B2D7-3396F798D57B}") IAccelerometerStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(Winapi::Commontypes::AccelerometerReadingType readingType, _di_IAccelerometer &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{C7C339B6-7527-502A-8A4C-CB9BEFE15840}") AsyncOperationCompletedHandler_1__IAccelerometer_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{0C3C472A-5E99-5317-BF40-F155BA996602}") AsyncOperationCompletedHandler_1__IAccelerometer  : public AsyncOperationCompletedHandler_1__IAccelerometer_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IAccelerometer asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{FC761D3B-5E4D-5148-A618-7B677059D0B8}") IAsyncOperation_1__IAccelerometer_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{DCBCC462-5310-5B74-B9E4-FDE908F7BD54}") IAsyncOperation_1__IAccelerometer  : public IAsyncOperation_1__IAccelerometer_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IAccelerometer handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IAccelerometer &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IAccelerometer &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IAccelerometer _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IAccelerometer __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IAccelerometer Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{9DE218CF-455D-4CF3-8200-70E1410340F8}") IAccelerometerStatics3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__IAccelerometer &__FromIdAsync_result) = 0 ;
	virtual HRESULT __safecall GetDeviceSelector(Winapi::Commontypes::AccelerometerReadingType readingType, HSTRING &__GetDeviceSelector_result) = 0 ;
};

__interface  INTERFACE_UUID("{E8F092EE-4964-401A-B602-220D7153C60A}") IAccelerometer2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations value) = 0 ;
	virtual HRESULT __safecall get_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations &__get_ReadingTransform_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::Display_DisplayOrientations _scw_get_ReadingTransform() { Winapi::Commontypes::Display_DisplayOrientations __r; HRESULT __hr = get_ReadingTransform(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::Display_DisplayOrientations ReadingTransform = {read=_scw_get_ReadingTransform, write=put_ReadingTransform};
};

__interface  INTERFACE_UUID("{87E0022A-ED80-49EB-BF8A-A4EA31E5CD84}") IAccelerometer3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{1D373C4F-42D3-45B2-8144-AB7FB665EB59}") IAccelerometer4  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_ReadingType(Winapi::Commontypes::AccelerometerReadingType &__get_ReadingType_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::AccelerometerReadingType _scw_get_ReadingType() { Winapi::Commontypes::AccelerometerReadingType __r; HRESULT __hr = get_ReadingType(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::AccelerometerReadingType ReadingType = {read=_scw_get_ReadingType};
};

__interface  INTERFACE_UUID("{0A864AA2-15AE-4A40-BE55-DB58D7DE7389}") IAccelerometerReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{01E91982-41FF-4406-AE83-62210FF16FE3}") IInclinometerDeviceId  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
};

__interface  INTERFACE_UUID("{9F44F055-B6F6-497F-B127-1A775E501458}") IInclinometerReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_PitchDegrees(float &__get_PitchDegrees_result) = 0 ;
	virtual HRESULT __safecall get_RollDegrees(float &__get_RollDegrees_result) = 0 ;
	virtual HRESULT __safecall get_YawDegrees(float &__get_YawDegrees_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_PitchDegrees() { float __r; HRESULT __hr = get_PitchDegrees(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float PitchDegrees = {read=_scw_get_PitchDegrees};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_RollDegrees() { float __r; HRESULT __hr = get_RollDegrees(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float RollDegrees = {read=_scw_get_RollDegrees};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_YawDegrees() { float __r; HRESULT __hr = get_YawDegrees(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float YawDegrees = {read=_scw_get_YawDegrees};
};

__interface  INTERFACE_UUID("{4AE91DC1-E7EB-4938-8511-AE0D6B440438}") IInclinometerReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IInclinometerReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IInclinometerReading _scw_get_Reading() { _di_IInclinometerReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IInclinometerReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{6F3B411F-D147-59F1-BBE4-7BEC396C7B6E}") TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{6A75A7D0-5CCB-5331-9437-3D202A95EC6D}") TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs  : public TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IInclinometer sender, _di_IInclinometerReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{2648CA6F-2286-406F-9161-F0C4BD806EBF}") IInclinometer  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_IInclinometerReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IInclinometer__IInclinometerReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{F22EC551-9C30-453A-8B49-3C3EEB33CB61}") IInclinometerStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_IInclinometer &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{043F9775-6A1E-499C-86E0-638C1A864B00}") IInclinometerStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefaultForRelativeReadings(_di_IInclinometer &__GetDefaultForRelativeReadings_result) = 0 ;
};

__interface  INTERFACE_UUID("{BD9A4280-B91A-4829-9392-ABC0B6BDF2B4}") IInclinometerStatics3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(Winapi::Commontypes::SensorReadingType sensorReadingtype, _di_IInclinometer &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{8F0EDE2A-2D0F-55F6-9566-3C21385FAE64}") AsyncOperationCompletedHandler_1__IInclinometer_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{8D258CE8-C204-5657-AB82-D0574D5FF386}") AsyncOperationCompletedHandler_1__IInclinometer  : public AsyncOperationCompletedHandler_1__IInclinometer_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IInclinometer asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{84EBB496-B69A-53CD-B690-A46189822B01}") IAsyncOperation_1__IInclinometer_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{8DFFE885-CBAA-5369-94AA-60F4441EB622}") IAsyncOperation_1__IInclinometer  : public IAsyncOperation_1__IInclinometer_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IInclinometer handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IInclinometer &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IInclinometer &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IInclinometer _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IInclinometer __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IInclinometer Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{E8BA96F9-6E85-4A83-AED0-D7CDCC9856C8}") IInclinometerStatics4  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDeviceSelector(Winapi::Commontypes::SensorReadingType readingType, HSTRING &__GetDeviceSelector_result) = 0 ;
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__IInclinometer &__FromIdAsync_result) = 0 ;
};

__interface  INTERFACE_UUID("{029F3393-28B2-45F8-BB16-61E86A7FAE6E}") IInclinometer2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations value) = 0 ;
	virtual HRESULT __safecall get_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations &__get_ReadingTransform_result) = 0 ;
	virtual HRESULT __safecall get_ReadingType(Winapi::Commontypes::SensorReadingType &__get_ReadingType_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::Display_DisplayOrientations _scw_get_ReadingTransform() { Winapi::Commontypes::Display_DisplayOrientations __r; HRESULT __hr = get_ReadingTransform(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::Display_DisplayOrientations ReadingTransform = {read=_scw_get_ReadingTransform, write=put_ReadingTransform};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::SensorReadingType _scw_get_ReadingType() { Winapi::Commontypes::SensorReadingType __r; HRESULT __hr = get_ReadingType(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::SensorReadingType ReadingType = {read=_scw_get_ReadingType};
};

__interface  INTERFACE_UUID("{3A095004-D765-4384-A3D7-0283F3ABE6AE}") IInclinometer3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{4F164781-E90B-4658-8915-0103E08A805A}") IInclinometerReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{B453E880-1FE3-4986-A257-E6ECE2723949}") IInclinometerReadingYawAccuracy  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_YawAccuracy(Winapi::Commontypes::MagnetometerAccuracy &__get_YawAccuracy_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::MagnetometerAccuracy _scw_get_YawAccuracy() { Winapi::Commontypes::MagnetometerAccuracy __r; HRESULT __hr = get_YawAccuracy(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::MagnetometerAccuracy YawAccuracy = {read=_scw_get_YawAccuracy};
};

__interface  INTERFACE_UUID("{1EE5E978-89A2-4275-9E95-7126F4708760}") IGyrometerDeviceId  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
};

__interface  INTERFACE_UUID("{B3D6DE5C-1EE4-456F-9DE7-E2493B5C8E03}") IGyrometerReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_AngularVelocityX(double &__get_AngularVelocityX_result) = 0 ;
	virtual HRESULT __safecall get_AngularVelocityY(double &__get_AngularVelocityY_result) = 0 ;
	virtual HRESULT __safecall get_AngularVelocityZ(double &__get_AngularVelocityZ_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_AngularVelocityX() { double __r; HRESULT __hr = get_AngularVelocityX(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double AngularVelocityX = {read=_scw_get_AngularVelocityX};
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_AngularVelocityY() { double __r; HRESULT __hr = get_AngularVelocityY(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double AngularVelocityY = {read=_scw_get_AngularVelocityY};
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_AngularVelocityZ() { double __r; HRESULT __hr = get_AngularVelocityZ(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double AngularVelocityZ = {read=_scw_get_AngularVelocityZ};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{0FDF1895-6F9E-42CE-8D58-388C0AB8356D}") IGyrometerReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IGyrometerReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IGyrometerReading _scw_get_Reading() { _di_IGyrometerReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IGyrometerReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{15171524-5786-59A5-AF5B-A01245726C44}") TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{2AA7CF2F-D411-5180-B557-8B5DFE728B7B}") TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs  : public TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IGyrometer sender, _di_IGyrometerReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{FDB9A9C4-84B1-4CA2-9763-9B589506C70C}") IGyrometer  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_IGyrometerReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IGyrometer__IGyrometerReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{83B6E7C9-E49D-4B39-86E6-CD554BE4C5C1}") IGyrometerStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_IGyrometer &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{15799501-958E-5315-A24A-0D7D7ACBC79C}") AsyncOperationCompletedHandler_1__IGyrometer_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{4817C0F7-F481-5983-92EA-FDD649299CE8}") AsyncOperationCompletedHandler_1__IGyrometer  : public AsyncOperationCompletedHandler_1__IGyrometer_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IGyrometer asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{FCEE7ABF-1DCF-50CC-B91B-7A1F59E0C28B}") IAsyncOperation_1__IGyrometer_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{C19DC157-AE9F-5F37-A487-F12D8D8D374E}") IAsyncOperation_1__IGyrometer  : public IAsyncOperation_1__IGyrometer_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IGyrometer handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IGyrometer &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IGyrometer &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IGyrometer _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IGyrometer __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IGyrometer Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{EF83F7A1-D700-4204-9613-79C6B161DF4E}") IGyrometerStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDeviceSelector(HSTRING &__GetDeviceSelector_result) = 0 ;
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__IGyrometer &__FromIdAsync_result) = 0 ;
};

__interface  INTERFACE_UUID("{63DF2443-8CE8-41C3-AC44-8698810B557F}") IGyrometer2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations value) = 0 ;
	virtual HRESULT __safecall get_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations &__get_ReadingTransform_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::Display_DisplayOrientations _scw_get_ReadingTransform() { Winapi::Commontypes::Display_DisplayOrientations __r; HRESULT __hr = get_ReadingTransform(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::Display_DisplayOrientations ReadingTransform = {read=_scw_get_ReadingTransform, write=put_ReadingTransform};
};

__interface  INTERFACE_UUID("{5D6F88D5-8FBC-4484-914B-528ADFD947B1}") IGyrometer3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{16AFE13C-2B89-44BB-822B-D1E1556FF09B}") IGyrometerReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{D181CA29-B085-4B1D-870A-4FF57BA74FD4}") ICompassDeviceId  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
};

__interface  INTERFACE_UUID("{82911128-513D-4DC9-B781-5EEDFBF02D0C}") ICompassReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_HeadingMagneticNorth(double &__get_HeadingMagneticNorth_result) = 0 ;
	virtual HRESULT __safecall get_HeadingTrueNorth(Winapi::Commontypes::_di_IReference_1__Double &__get_HeadingTrueNorth_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_HeadingMagneticNorth() { double __r; HRESULT __hr = get_HeadingMagneticNorth(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double HeadingMagneticNorth = {read=_scw_get_HeadingMagneticNorth};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__Double _scw_get_HeadingTrueNorth() { Winapi::Commontypes::_di_IReference_1__Double __r; HRESULT __hr = get_HeadingTrueNorth(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__Double HeadingTrueNorth = {read=_scw_get_HeadingTrueNorth};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{8F1549B0-E8BC-4C7E-B009-4E41DF137072}") ICompassReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_ICompassReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_ICompassReading _scw_get_Reading() { _di_ICompassReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_ICompassReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{E787D73D-A121-5AE6-B497-AB934837E57F}") TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{E918EC6B-CC83-5428-A983-F23DB6D211C3}") TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs  : public TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_ICompass sender, _di_ICompassReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{292FFA94-1B45-403C-BA06-B106DBA69A64}") ICompass  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_ICompassReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__ICompass__ICompassReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{9ABC97DF-56EC-4C25-B54D-40A68BB5B269}") ICompassStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_ICompass &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{0CF1E460-BC2C-587C-9822-420BA04D0551}") AsyncOperationCompletedHandler_1__ICompass_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{83AE0D8F-80B3-51B4-A59B-AB046DCBD404}") AsyncOperationCompletedHandler_1__ICompass  : public AsyncOperationCompletedHandler_1__ICompass_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__ICompass asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{5297C24C-A6FB-5E03-A4F8-EE143C435DF8}") IAsyncOperation_1__ICompass_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{3E917A0F-7B90-5B89-A301-9467F8C36C52}") IAsyncOperation_1__ICompass  : public IAsyncOperation_1__ICompass_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__ICompass handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__ICompass &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_ICompass &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__ICompass _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__ICompass __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__ICompass Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{0ACE0EAD-3BAA-4990-9CE4-BE0913754ED2}") ICompassStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDeviceSelector(HSTRING &__GetDeviceSelector_result) = 0 ;
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__ICompass &__FromIdAsync_result) = 0 ;
};

__interface  INTERFACE_UUID("{36F26D09-C7D7-434F-B461-979DDFC2322F}") ICompass2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations value) = 0 ;
	virtual HRESULT __safecall get_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations &__get_ReadingTransform_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::Display_DisplayOrientations _scw_get_ReadingTransform() { Winapi::Commontypes::Display_DisplayOrientations __r; HRESULT __hr = get_ReadingTransform(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::Display_DisplayOrientations ReadingTransform = {read=_scw_get_ReadingTransform, write=put_ReadingTransform};
};

__interface  INTERFACE_UUID("{A424801B-C5EA-4D45-A0EC-4B791F041A89}") ICompass3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{B13A661E-51BB-4A12-BEDD-AD47FF87D2E8}") ICompassReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{E761354E-8911-40F7-9E16-6ECC7DAEC5DE}") ICompassReadingHeadingAccuracy  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_HeadingAccuracy(Winapi::Commontypes::MagnetometerAccuracy &__get_HeadingAccuracy_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::MagnetometerAccuracy _scw_get_HeadingAccuracy() { Winapi::Commontypes::MagnetometerAccuracy __r; HRESULT __hr = get_HeadingAccuracy(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::MagnetometerAccuracy HeadingAccuracy = {read=_scw_get_HeadingAccuracy};
};

__interface  INTERFACE_UUID("{7FEE49F8-0AFB-4F51-87F0-6C26375CE94F}") ILightSensorDeviceId  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
};

__interface  INTERFACE_UUID("{FFDF6300-227C-4D2B-B302-FC0142485C68}") ILightSensorReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_IlluminanceInLux(float &__get_IlluminanceInLux_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_IlluminanceInLux() { float __r; HRESULT __hr = get_IlluminanceInLux(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float IlluminanceInLux = {read=_scw_get_IlluminanceInLux};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{A3A2F4CF-258B-420C-B8AB-8EDD601ECF50}") ILightSensorReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_ILightSensorReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_ILightSensorReading _scw_get_Reading() { _di_ILightSensorReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_ILightSensorReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{1ECF183A-9F0A-5F73-9225-5A33EAB5594F}") TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{7356B947-E0F6-5A86-9EF8-17ACFB9B1DE7}") TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs  : public TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_ILightSensor sender, _di_ILightSensorReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{F84C0718-0C54-47AE-922E-789F57FB03A0}") ILightSensor  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_ILightSensorReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__ILightSensor__ILightSensorReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{45DB8C84-C3A8-471E-9A53-6457FAD87C0E}") ILightSensorStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_ILightSensor &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{5D04E2BF-5163-5238-8F23-CE470B30340D}") AsyncOperationCompletedHandler_1__ILightSensor_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{0ABED528-449E-525A-897C-81EAF528785B}") AsyncOperationCompletedHandler_1__ILightSensor  : public AsyncOperationCompletedHandler_1__ILightSensor_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__ILightSensor asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{380E592C-47A0-5DF4-8DE2-B2EEFA9DB8AD}") IAsyncOperation_1__ILightSensor_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{47168FBC-2105-5603-B81B-5CC5FBF68377}") IAsyncOperation_1__ILightSensor  : public IAsyncOperation_1__ILightSensor_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__ILightSensor handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__ILightSensor &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_ILightSensor &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__ILightSensor _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__ILightSensor __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__ILightSensor Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{0EC0A650-DDC6-40AB-ACE3-EC3359D42C51}") ILightSensorStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDeviceSelector(HSTRING &__GetDeviceSelector_result) = 0 ;
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__ILightSensor &__FromIdAsync_result) = 0 ;
};

__interface  INTERFACE_UUID("{486B24E8-A94C-4090-8F48-09F782A9F7D5}") ILightSensor2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{B7512185-44A3-44C9-8190-9EF6DE0A8A74}") ILightSensorReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{0A3D5A67-22F4-4392-9538-65D0BD064AA6}") ISensorRotationMatrix  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_M11(float &__get_M11_result) = 0 ;
	virtual HRESULT __safecall get_M12(float &__get_M12_result) = 0 ;
	virtual HRESULT __safecall get_M13(float &__get_M13_result) = 0 ;
	virtual HRESULT __safecall get_M21(float &__get_M21_result) = 0 ;
	virtual HRESULT __safecall get_M22(float &__get_M22_result) = 0 ;
	virtual HRESULT __safecall get_M23(float &__get_M23_result) = 0 ;
	virtual HRESULT __safecall get_M31(float &__get_M31_result) = 0 ;
	virtual HRESULT __safecall get_M32(float &__get_M32_result) = 0 ;
	virtual HRESULT __safecall get_M33(float &__get_M33_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M11() { float __r; HRESULT __hr = get_M11(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M11 = {read=_scw_get_M11};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M12() { float __r; HRESULT __hr = get_M12(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M12 = {read=_scw_get_M12};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M13() { float __r; HRESULT __hr = get_M13(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M13 = {read=_scw_get_M13};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M21() { float __r; HRESULT __hr = get_M21(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M21 = {read=_scw_get_M21};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M22() { float __r; HRESULT __hr = get_M22(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M22 = {read=_scw_get_M22};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M23() { float __r; HRESULT __hr = get_M23(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M23 = {read=_scw_get_M23};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M31() { float __r; HRESULT __hr = get_M31(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M31 = {read=_scw_get_M31};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M32() { float __r; HRESULT __hr = get_M32(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M32 = {read=_scw_get_M32};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_M33() { float __r; HRESULT __hr = get_M33(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float M33 = {read=_scw_get_M33};
};

__interface  INTERFACE_UUID("{C9C5C827-C71C-46E7-9DA3-36A193B232BC}") ISensorQuaternion  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_W(float &__get_W_result) = 0 ;
	virtual HRESULT __safecall get_X(float &__get_X_result) = 0 ;
	virtual HRESULT __safecall get_Y(float &__get_Y_result) = 0 ;
	virtual HRESULT __safecall get_Z(float &__get_Z_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_W() { float __r; HRESULT __hr = get_W(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float W = {read=_scw_get_W};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_X() { float __r; HRESULT __hr = get_X(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float X = {read=_scw_get_X};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_Y() { float __r; HRESULT __hr = get_Y(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float Y = {read=_scw_get_Y};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_Z() { float __r; HRESULT __hr = get_Z(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float Z = {read=_scw_get_Z};
};

__interface  INTERFACE_UUID("{5A69B648-4C29-49EC-B28F-EA1D117B66F0}") IOrientationSensorDeviceId  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
};

__interface  INTERFACE_UUID("{4756C993-6595-4897-BCC6-D537EE757564}") IOrientationSensorReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_RotationMatrix(_di_ISensorRotationMatrix &__get_RotationMatrix_result) = 0 ;
	virtual HRESULT __safecall get_Quaternion(_di_ISensorQuaternion &__get_Quaternion_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_ISensorQuaternion _scw_get_Quaternion() { _di_ISensorQuaternion __r; HRESULT __hr = get_Quaternion(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_ISensorQuaternion Quaternion = {read=_scw_get_Quaternion};
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_ISensorRotationMatrix _scw_get_RotationMatrix() { _di_ISensorRotationMatrix __r; HRESULT __hr = get_RotationMatrix(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_ISensorRotationMatrix RotationMatrix = {read=_scw_get_RotationMatrix};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{012C1186-C3BA-46BC-AE65-7A98996CBFB8}") IOrientationSensorReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IOrientationSensorReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IOrientationSensorReading _scw_get_Reading() { _di_IOrientationSensorReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IOrientationSensorReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{91AE0C43-E1F7-577D-A161-8AAF275EB927}") TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{DCCA4324-96EB-5315-9D53-6EF61E4C8750}") TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs  : public TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IOrientationSensor sender, _di_IOrientationSensorReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{5E354635-CF6B-4C63-ABD8-10252B0BF6EC}") IOrientationSensor  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_IOrientationSensorReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IOrientationSensor__IOrientationSensorReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{10EF8712-FB4C-428A-898B-2765E409E669}") IOrientationSensorStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_IOrientationSensor &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{59DA0D0B-D40A-4C71-9276-8A272A0A6619}") IOrientationSensorStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefaultForRelativeReadings(_di_IOrientationSensor &__GetDefaultForRelativeReadings_result) = 0 ;
};

__interface  INTERFACE_UUID("{D82CE920-2777-40FF-9F59-D654B085F12F}") IOrientationSensorStatics3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(Winapi::Commontypes::SensorReadingType sensorReadingtype, _di_IOrientationSensor &__GetDefault_result) = 0 /* overload */;
	virtual HRESULT __safecall GetDefault(Winapi::Commontypes::SensorReadingType sensorReadingType, Winapi::Commontypes::SensorOptimizationGoal optimizationGoal, _di_IOrientationSensor &__GetDefault_result) = 0 /* overload */;
};

__interface  INTERFACE_UUID("{8330B323-6695-53D4-ACD7-B60C24C1B879}") AsyncOperationCompletedHandler_1__IOrientationSensor_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{98586AA9-59B5-50E9-8FE6-2BAF0554C9A4}") AsyncOperationCompletedHandler_1__IOrientationSensor  : public AsyncOperationCompletedHandler_1__IOrientationSensor_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IOrientationSensor asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{8EF36AA8-6F6D-538B-A42B-37AF7369049E}") IAsyncOperation_1__IOrientationSensor_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{FE4811A2-9428-57D4-961B-62B658FB89CE}") IAsyncOperation_1__IOrientationSensor  : public IAsyncOperation_1__IOrientationSensor_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IOrientationSensor handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IOrientationSensor &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IOrientationSensor &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IOrientationSensor _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IOrientationSensor __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IOrientationSensor Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{A67FEB55-2C85-4B28-A0FE-58C4B20495F5}") IOrientationSensorStatics4  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDeviceSelector(Winapi::Commontypes::SensorReadingType readingType, HSTRING &__GetDeviceSelector_result) = 0 /* overload */;
	virtual HRESULT __safecall GetDeviceSelector(Winapi::Commontypes::SensorReadingType readingType, Winapi::Commontypes::SensorOptimizationGoal optimizationGoal, HSTRING &__GetDeviceSelector_result) = 0 /* overload */;
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__IOrientationSensor &__FromIdAsync_result) = 0 ;
};

__interface  INTERFACE_UUID("{0D924CF9-2F1F-49C9-8042-4A1813D67760}") IOrientationSensor2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations value) = 0 ;
	virtual HRESULT __safecall get_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations &__get_ReadingTransform_result) = 0 ;
	virtual HRESULT __safecall get_ReadingType(Winapi::Commontypes::SensorReadingType &__get_ReadingType_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::Display_DisplayOrientations _scw_get_ReadingTransform() { Winapi::Commontypes::Display_DisplayOrientations __r; HRESULT __hr = get_ReadingTransform(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::Display_DisplayOrientations ReadingTransform = {read=_scw_get_ReadingTransform, write=put_ReadingTransform};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::SensorReadingType _scw_get_ReadingType() { Winapi::Commontypes::SensorReadingType __r; HRESULT __hr = get_ReadingType(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::SensorReadingType ReadingType = {read=_scw_get_ReadingType};
};

__interface  INTERFACE_UUID("{2CCE578D-646B-48C5-B7EE-44FDC4C6AAFD}") IOrientationSensor3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{00576E5F-49F8-4C05-9E07-24FAC79408C3}") IOrientationSensorReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{D1AC9824-3F5A-49A2-BC7B-1180BC38CD2B}") IOrientationSensorReadingYawAccuracy  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_YawAccuracy(Winapi::Commontypes::MagnetometerAccuracy &__get_YawAccuracy_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::MagnetometerAccuracy _scw_get_YawAccuracy() { Winapi::Commontypes::MagnetometerAccuracy __r; HRESULT __hr = get_YawAccuracy(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::MagnetometerAccuracy YawAccuracy = {read=_scw_get_YawAccuracy};
};

__interface  INTERFACE_UUID("{FBC00ACB-3B76-41F6-8091-30EFE646D3CF}") ISimpleOrientationSensorDeviceId  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
};

__interface  INTERFACE_UUID("{BCD5C660-23D4-4B4C-A22E-BA81ADE0C601}") ISimpleOrientationSensorOrientationChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_Orientation(Winapi::Commontypes::SimpleOrientation &__get_Orientation_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::SimpleOrientation _scw_get_Orientation() { Winapi::Commontypes::SimpleOrientation __r; HRESULT __hr = get_Orientation(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::SimpleOrientation Orientation = {read=_scw_get_Orientation};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{92437FA7-EA7B-5FC5-8ECF-1B911BEA2BFC}") TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{EC8B4336-878E-597A-ACE4-659581E77F5B}") TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs  : public TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_ISimpleOrientationSensor sender, _di_ISimpleOrientationSensorOrientationChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{5FF53856-214A-4DEE-A3F9-616F1AB06FFD}") ISimpleOrientationSensor  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentOrientation(Winapi::Commontypes::SimpleOrientation &__GetCurrentOrientation_result) = 0 ;
	virtual HRESULT __safecall add_OrientationChanged(_di_TypedEventHandler_2__ISimpleOrientationSensor__ISimpleOrientationSensorOrientationChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_OrientationChanged_result) = 0 ;
	virtual HRESULT __safecall remove_OrientationChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
};

__interface  INTERFACE_UUID("{72ED066F-70AA-40C6-9B1B-3433F7459B4E}") ISimpleOrientationSensorStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_ISimpleOrientationSensor &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{A277A798-8870-453E-8BD6-B8F5D8D7941B}") ISimpleOrientationSensor2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations value) = 0 ;
	virtual HRESULT __safecall get_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations &__get_ReadingTransform_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::Display_DisplayOrientations _scw_get_ReadingTransform() { Winapi::Commontypes::Display_DisplayOrientations __r; HRESULT __hr = get_ReadingTransform(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::Display_DisplayOrientations ReadingTransform = {read=_scw_get_ReadingTransform, write=put_ReadingTransform};
};

__interface  INTERFACE_UUID("{58B498C2-7E4B-404C-9FC5-5DE8B40EBAE3}") IMagnetometerDeviceId  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
};

__interface  INTERFACE_UUID("{0C2CC40D-EBFD-4E5C-BB11-AFC29B3CAE61}") IMagnetometerReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_MagneticFieldX(float &__get_MagneticFieldX_result) = 0 ;
	virtual HRESULT __safecall get_MagneticFieldY(float &__get_MagneticFieldY_result) = 0 ;
	virtual HRESULT __safecall get_MagneticFieldZ(float &__get_MagneticFieldZ_result) = 0 ;
	virtual HRESULT __safecall get_DirectionalAccuracy(Winapi::Commontypes::MagnetometerAccuracy &__get_DirectionalAccuracy_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::MagnetometerAccuracy _scw_get_DirectionalAccuracy() { Winapi::Commontypes::MagnetometerAccuracy __r; HRESULT __hr = get_DirectionalAccuracy(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::MagnetometerAccuracy DirectionalAccuracy = {read=_scw_get_DirectionalAccuracy};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_MagneticFieldX() { float __r; HRESULT __hr = get_MagneticFieldX(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float MagneticFieldX = {read=_scw_get_MagneticFieldX};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_MagneticFieldY() { float __r; HRESULT __hr = get_MagneticFieldY(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float MagneticFieldY = {read=_scw_get_MagneticFieldY};
	#pragma option push -w-inl
	/* safecall wrapper */ inline float _scw_get_MagneticFieldZ() { float __r; HRESULT __hr = get_MagneticFieldZ(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property float MagneticFieldZ = {read=_scw_get_MagneticFieldZ};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{17EAE872-2EB9-4EE7-8AD0-3127537D949B}") IMagnetometerReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IMagnetometerReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IMagnetometerReading _scw_get_Reading() { _di_IMagnetometerReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IMagnetometerReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{F9A0DA76-C4FD-50AB-98B6-BFD26D6D3D82}") TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{C594359D-2616-5095-832B-CC3935C3A9D9}") TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs  : public TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IMagnetometer sender, _di_IMagnetometerReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{484F626E-D3C9-4111-B3F6-2CF1FAA418D5}") IMagnetometer  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_IMagnetometerReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IMagnetometer__IMagnetometerReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{853C64CC-0698-4DDA-A6DF-9CB9CC4AB40A}") IMagnetometerStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_IMagnetometer &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{46E0A768-9645-51A6-B6A7-1E5F4B40E1F3}") AsyncOperationCompletedHandler_1__IMagnetometer_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{CBE628AF-5D3B-5057-995E-0F04EEF36C38}") AsyncOperationCompletedHandler_1__IMagnetometer  : public AsyncOperationCompletedHandler_1__IMagnetometer_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IMagnetometer asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{B0455443-E790-5AA3-8767-4932032274EE}") IAsyncOperation_1__IMagnetometer_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{8C71DB4D-D3FF-5F01-867A-8BE76BFDB279}") IAsyncOperation_1__IMagnetometer  : public IAsyncOperation_1__IMagnetometer_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IMagnetometer handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IMagnetometer &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IMagnetometer &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IMagnetometer _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IMagnetometer __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IMagnetometer Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{2C0819F0-FFC6-4F89-A06F-18FA10792933}") IMagnetometerStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDeviceSelector(HSTRING &__GetDeviceSelector_result) = 0 ;
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__IMagnetometer &__FromIdAsync_result) = 0 ;
};

__interface  INTERFACE_UUID("{B4656C85-26F6-444B-A9E2-A23F966CD368}") IMagnetometer2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations value) = 0 ;
	virtual HRESULT __safecall get_ReadingTransform(Winapi::Commontypes::Display_DisplayOrientations &__get_ReadingTransform_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::Display_DisplayOrientations _scw_get_ReadingTransform() { Winapi::Commontypes::Display_DisplayOrientations __r; HRESULT __hr = get_ReadingTransform(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::Display_DisplayOrientations ReadingTransform = {read=_scw_get_ReadingTransform, write=put_ReadingTransform};
};

__interface  INTERFACE_UUID("{BE93DB7C-A625-48EF-ACF7-FAC104832671}") IMagnetometer3  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{D4C95C61-61D9-404B-A328-066F177A1409}") IMagnetometerReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{85125A96-1472-40A2-B2AE-E1EF29226C78}") IActivitySensorReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_Activity(Winapi::Commontypes::ActivityType &__get_Activity_result) = 0 ;
	virtual HRESULT __safecall get_Confidence(Winapi::Commontypes::ActivitySensorReadingConfidence &__get_Confidence_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::ActivityType _scw_get_Activity() { Winapi::Commontypes::ActivityType __r; HRESULT __hr = get_Activity(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::ActivityType Activity = {read=_scw_get_Activity};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::ActivitySensorReadingConfidence _scw_get_Confidence() { Winapi::Commontypes::ActivitySensorReadingConfidence __r; HRESULT __hr = get_Confidence(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::ActivitySensorReadingConfidence Confidence = {read=_scw_get_Confidence};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{ADC48D5D-B343-5A58-8454-6E2BC2E0475C}") AsyncOperationCompletedHandler_1__IActivitySensorReading_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{856A17A1-6B88-5986-ACBE-600B21971EBC}") AsyncOperationCompletedHandler_1__IActivitySensorReading  : public AsyncOperationCompletedHandler_1__IActivitySensorReading_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IActivitySensorReading asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{79A87969-327F-5B7A-A0D3-73EAB16DE21C}") IAsyncOperation_1__IActivitySensorReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{8553FAE3-FE1A-5952-84C0-30C817E9E597}") IAsyncOperation_1__IActivitySensorReading  : public IAsyncOperation_1__IActivitySensorReading_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IActivitySensorReading handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IActivitySensorReading &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IActivitySensorReading &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IActivitySensorReading _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IActivitySensorReading __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IActivitySensorReading Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{DE386717-AEB6-4EC7-946A-D9CC19B951EC}") IActivitySensorReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IActivitySensorReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IActivitySensorReading _scw_get_Reading() { _di_IActivitySensorReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IActivitySensorReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{A5B72E01-546C-5FBB-B847-49200AAAAAC5}") TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{BDA69EDC-1056-5BFA-8955-E4618E29C9C9}") TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs  : public TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IActivitySensor sender, _di_IActivitySensorReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{CD7A630C-FB5F-48EB-B09B-A2708D1C61EF}") IActivitySensor  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReadingAsync(_di_IAsyncOperation_1__IActivitySensorReading &__GetCurrentReadingAsync_result) = 0 ;
	virtual HRESULT __safecall get_SubscribedActivities(_di_IVector_1__ActivityType &__get_SubscribedActivities_result) = 0 ;
	virtual HRESULT __safecall get_PowerInMilliwatts(double &__get_PowerInMilliwatts_result) = 0 ;
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	virtual HRESULT __safecall get_SupportedActivities(_di_IVectorView_1__ActivityType &__get_SupportedActivities_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IActivitySensor__IActivitySensorReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_PowerInMilliwatts() { double __r; HRESULT __hr = get_PowerInMilliwatts(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double PowerInMilliwatts = {read=_scw_get_PowerInMilliwatts};
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IVector_1__ActivityType _scw_get_SubscribedActivities() { _di_IVector_1__ActivityType __r; HRESULT __hr = get_SubscribedActivities(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IVector_1__ActivityType SubscribedActivities = {read=_scw_get_SubscribedActivities};
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IVectorView_1__ActivityType _scw_get_SupportedActivities() { _di_IVectorView_1__ActivityType __r; HRESULT __hr = get_SupportedActivities(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IVectorView_1__ActivityType SupportedActivities = {read=_scw_get_SupportedActivities};
};

__interface  INTERFACE_UUID("{FB0594F4-93D9-5C2F-B8EB-90F1E9258FDC}") AsyncOperationCompletedHandler_1__IActivitySensor_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{6CC7625C-29FF-5A56-BCE3-806CDE6AB524}") AsyncOperationCompletedHandler_1__IActivitySensor  : public AsyncOperationCompletedHandler_1__IActivitySensor_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IActivitySensor asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{C33003AE-E7AE-572B-8D55-7DB197356C30}") IAsyncOperation_1__IActivitySensor_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{73ADA693-ABC7-509B-8093-5BC4A5809253}") IAsyncOperation_1__IActivitySensor  : public IAsyncOperation_1__IActivitySensor_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IActivitySensor handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IActivitySensor &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IActivitySensor &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IActivitySensor _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IActivitySensor __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IActivitySensor Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{D2DAB535-0C94-547E-AFE3-5527BCBEB9CC}") IIterator_1__IActivitySensorReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{8E90F3DC-B93D-51A4-85B2-AFD31EA67A7B}") IIterator_1__IActivitySensorReading  : public IIterator_1__IActivitySensorReading_Base 
{
	virtual HRESULT __safecall get_Current(_di_IActivitySensorReading &__get_Current_result) = 0 ;
	virtual HRESULT __safecall get_HasCurrent(bool &__get_HasCurrent_result) = 0 ;
	virtual HRESULT __safecall MoveNext(bool &__MoveNext_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned itemsSize, PIActivitySensorReading items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IActivitySensorReading _scw_get_Current() { _di_IActivitySensorReading __r; HRESULT __hr = get_Current(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IActivitySensorReading Current = {read=_scw_get_Current};
	#pragma option push -w-inl
	/* safecall wrapper */ inline bool _scw_get_HasCurrent() { bool __r; HRESULT __hr = get_HasCurrent(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property bool HasCurrent = {read=_scw_get_HasCurrent};
};

__interface  INTERFACE_UUID("{9A34CE03-8C6D-5994-907F-D5C2D19148CB}") IIterable_1__IActivitySensorReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{2EBBCB05-1A40-5DB4-9245-95E5FBBF9C98}") IIterable_1__IActivitySensorReading  : public IIterable_1__IActivitySensorReading_Base 
{
	virtual HRESULT __safecall First(_di_IIterator_1__IActivitySensorReading &__First_result) = 0 ;
};

__interface  INTERFACE_UUID("{780FDF9E-4215-50AA-B2FC-9643492B7E6C}") IVectorView_1__IActivitySensorReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetAt(unsigned index, _di_IActivitySensorReading &__GetAt_result) = 0 ;
	virtual HRESULT __safecall get_Size(unsigned &__get_Size_result) = 0 ;
	virtual HRESULT __safecall IndexOf(_di_IActivitySensorReading value, /* out */ unsigned &index, bool &__IndexOf_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned startIndex, unsigned itemsSize, PIActivitySensorReading items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_Size() { unsigned __r; HRESULT __hr = get_Size(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned Size = {read=_scw_get_Size};
};

__interface  INTERFACE_UUID("{179FB953-2D58-5991-8F5B-AC64219A1101}") AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{731CBCE6-E265-58D6-93EE-E23E4B29FF68}") AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading  : public AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IVectorView_1__IActivitySensorReading asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{CD781B82-7900-51A3-80CE-903E2E0A4F0E}") IAsyncOperation_1__IVectorView_1__IActivitySensorReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{22BF6528-41D4-5F6B-BC5C-0B29C82FBD5A}") IAsyncOperation_1__IVectorView_1__IActivitySensorReading  : public IAsyncOperation_1__IVectorView_1__IActivitySensorReading_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IVectorView_1__IActivitySensorReading &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IVectorView_1__IActivitySensorReading Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{A71E0E9D-EE8B-45D1-B25B-08CC0DF92AB6}") IActivitySensorStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefaultAsync(_di_IAsyncOperation_1__IActivitySensor &__GetDefaultAsync_result) = 0 ;
	virtual HRESULT __safecall GetDeviceSelector(HSTRING &__GetDeviceSelector_result) = 0 ;
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__IActivitySensor &__FromIdAsync_result) = 0 ;
	virtual HRESULT __safecall GetSystemHistoryAsync(Winapi::Commontypes::DateTime fromTime, _di_IAsyncOperation_1__IVectorView_1__IActivitySensorReading &__GetSystemHistoryAsync_result) = 0 /* overload */;
	virtual HRESULT __safecall GetSystemHistoryAsync(Winapi::Commontypes::DateTime fromTime, Winapi::Commontypes::TimeSpan duration, _di_IAsyncOperation_1__IVectorView_1__IActivitySensorReading &__GetSystemHistoryAsync_result) = 0 /* overload */;
};

__interface  INTERFACE_UUID("{4F3C2915-D93B-47BD-960A-F20FB2F322B9}") IActivitySensorReadingChangeReport  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IActivitySensorReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IActivitySensorReading _scw_get_Reading() { _di_IActivitySensorReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IActivitySensorReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{9C07034E-8333-59D5-8D60-0E3F0438AC12}") IIterator_1__IActivitySensorReadingChangeReport_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{F01A64E7-E3E3-5D94-9F3A-EA63C9C4495E}") IIterator_1__IActivitySensorReadingChangeReport  : public IIterator_1__IActivitySensorReadingChangeReport_Base 
{
	virtual HRESULT __safecall get_Current(_di_IActivitySensorReadingChangeReport &__get_Current_result) = 0 ;
	virtual HRESULT __safecall get_HasCurrent(bool &__get_HasCurrent_result) = 0 ;
	virtual HRESULT __safecall MoveNext(bool &__MoveNext_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned itemsSize, PIActivitySensorReadingChangeReport items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IActivitySensorReadingChangeReport _scw_get_Current() { _di_IActivitySensorReadingChangeReport __r; HRESULT __hr = get_Current(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IActivitySensorReadingChangeReport Current = {read=_scw_get_Current};
	#pragma option push -w-inl
	/* safecall wrapper */ inline bool _scw_get_HasCurrent() { bool __r; HRESULT __hr = get_HasCurrent(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property bool HasCurrent = {read=_scw_get_HasCurrent};
};

__interface  INTERFACE_UUID("{551A4962-9E96-5E6B-8B8A-65EE3D0046F3}") IIterable_1__IActivitySensorReadingChangeReport_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{2960EDAE-C062-5C20-ACA2-0EFF1A2EBEF0}") IIterable_1__IActivitySensorReadingChangeReport  : public IIterable_1__IActivitySensorReadingChangeReport_Base 
{
	virtual HRESULT __safecall First(_di_IIterator_1__IActivitySensorReadingChangeReport &__First_result) = 0 ;
};

__interface  INTERFACE_UUID("{50767C75-433E-5527-8CE5-7D61ED23BC9E}") IVectorView_1__IActivitySensorReadingChangeReport  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetAt(unsigned index, _di_IActivitySensorReadingChangeReport &__GetAt_result) = 0 ;
	virtual HRESULT __safecall get_Size(unsigned &__get_Size_result) = 0 ;
	virtual HRESULT __safecall IndexOf(_di_IActivitySensorReadingChangeReport value, /* out */ unsigned &index, bool &__IndexOf_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned startIndex, unsigned itemsSize, PIActivitySensorReadingChangeReport items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_Size() { unsigned __r; HRESULT __hr = get_Size(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned Size = {read=_scw_get_Size};
};

__interface  INTERFACE_UUID("{F5B9D2E6-1DF6-4A1A-A7AD-321D4F5DB247}") IBarometerReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_StationPressureInHectopascals(double &__get_StationPressureInHectopascals_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_StationPressureInHectopascals() { double __r; HRESULT __hr = get_StationPressureInHectopascals(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double StationPressureInHectopascals = {read=_scw_get_StationPressureInHectopascals};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{3D84945F-037B-404F-9BBB-6232D69543C3}") IBarometerReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IBarometerReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IBarometerReading _scw_get_Reading() { _di_IBarometerReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IBarometerReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{E4CAF459-D101-5CA5-A4EA-DEB0917AE27E}") TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{A55A1B34-4A10-5FBC-BDA2-3B1BA63C9620}") TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs  : public TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IBarometer sender, _di_IBarometerReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{934475A8-78BF-452F-B017-F0209CE6DAB4}") IBarometer  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_IBarometerReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IBarometer__IBarometerReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{286B270A-02E3-4F86-84FC-FDD892B5940F}") IBarometerStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_IBarometer &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{A15E21D6-5467-590C-AFE1-9C8132DCD8A4}") AsyncOperationCompletedHandler_1__IBarometer_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{15D80F28-0E9D-5608-A4CF-7D00336F37BC}") AsyncOperationCompletedHandler_1__IBarometer  : public AsyncOperationCompletedHandler_1__IBarometer_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IBarometer asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{51876037-9F36-5C86-855D-3DDD251DF9A8}") IAsyncOperation_1__IBarometer_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{8E9AB142-3E6D-5F6A-9219-C28CBE795CEF}") IAsyncOperation_1__IBarometer  : public IAsyncOperation_1__IBarometer_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IBarometer handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IBarometer &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IBarometer &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IBarometer _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IBarometer __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IBarometer Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{8FC6B1E7-95FF-44AC-878E-D65C8308C34C}") IBarometerStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__IBarometer &__FromIdAsync_result) = 0 ;
	virtual HRESULT __safecall GetDeviceSelector(HSTRING &__GetDeviceSelector_result) = 0 ;
};

__interface  INTERFACE_UUID("{32BCC418-3EEB-4D04-9574-7633A8781F9F}") IBarometer2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{85A244EB-90C5-4875-891C-3865B4C357E7}") IBarometerReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{2245DCF4-A8E1-432F-896A-BE0DD9B02D24}") IPedometerReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_StepKind(Winapi::Commontypes::PedometerStepKind &__get_StepKind_result) = 0 ;
	virtual HRESULT __safecall get_CumulativeSteps(int &__get_CumulativeSteps_result) = 0 ;
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_CumulativeStepsDuration(Winapi::Commontypes::TimeSpan &__get_CumulativeStepsDuration_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline int _scw_get_CumulativeSteps() { int __r; HRESULT __hr = get_CumulativeSteps(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property int CumulativeSteps = {read=_scw_get_CumulativeSteps};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::TimeSpan _scw_get_CumulativeStepsDuration() { Winapi::Commontypes::TimeSpan __r; HRESULT __hr = get_CumulativeStepsDuration(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::TimeSpan CumulativeStepsDuration = {read=_scw_get_CumulativeStepsDuration};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::PedometerStepKind _scw_get_StepKind() { Winapi::Commontypes::PedometerStepKind __r; HRESULT __hr = get_StepKind(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::PedometerStepKind StepKind = {read=_scw_get_StepKind};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{F855E47E-ABBC-4456-86A8-25CF2B333742}") IPedometerReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IPedometerReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IPedometerReading _scw_get_Reading() { _di_IPedometerReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IPedometerReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{DCD47693-AAD5-5B3C-9C8D-140B8BC2122B}") TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{AA04307E-B7E8-5AE2-99CB-3C75CD084E48}") TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs  : public TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IPedometer sender, _di_IPedometerReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{9A1E013D-3D98-45F8-8920-8E4ECACA5F97}") IPedometer  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	virtual HRESULT __safecall get_PowerInMilliwatts(double &__get_PowerInMilliwatts_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IPedometer__IPedometerReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_PowerInMilliwatts() { double __r; HRESULT __hr = get_PowerInMilliwatts(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double PowerInMilliwatts = {read=_scw_get_PowerInMilliwatts};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{A62DBE4E-51DE-5A13-BA21-E76DF3BC1396}") AsyncOperationCompletedHandler_1__IPedometer_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{6F524164-28F7-55AF-803E-57BEFA8E348B}") AsyncOperationCompletedHandler_1__IPedometer  : public AsyncOperationCompletedHandler_1__IPedometer_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IPedometer asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{9414388F-1B3E-55F5-819B-AB3833646055}") IAsyncOperation_1__IPedometer_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{EC8C42C2-06A0-5A6A-9A0D-F9D87516604D}") IAsyncOperation_1__IPedometer  : public IAsyncOperation_1__IPedometer_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IPedometer handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IPedometer &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IPedometer &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IPedometer _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IPedometer __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IPedometer Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{0AC70ED3-8553-5EF3-92F8-438609623087}") IIterator_1__IPedometerReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{5DE1D135-53ED-5540-BB3A-974D4734E763}") IIterator_1__IPedometerReading  : public IIterator_1__IPedometerReading_Base 
{
	virtual HRESULT __safecall get_Current(_di_IPedometerReading &__get_Current_result) = 0 ;
	virtual HRESULT __safecall get_HasCurrent(bool &__get_HasCurrent_result) = 0 ;
	virtual HRESULT __safecall MoveNext(bool &__MoveNext_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned itemsSize, PIPedometerReading items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IPedometerReading _scw_get_Current() { _di_IPedometerReading __r; HRESULT __hr = get_Current(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IPedometerReading Current = {read=_scw_get_Current};
	#pragma option push -w-inl
	/* safecall wrapper */ inline bool _scw_get_HasCurrent() { bool __r; HRESULT __hr = get_HasCurrent(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property bool HasCurrent = {read=_scw_get_HasCurrent};
};

__interface  INTERFACE_UUID("{BBB61A5C-98C3-5718-88FE-5392A7451E2D}") IIterable_1__IPedometerReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{A2C8ABEB-1922-5560-9DC3-07BEAC496D61}") IIterable_1__IPedometerReading  : public IIterable_1__IPedometerReading_Base 
{
	virtual HRESULT __safecall First(_di_IIterator_1__IPedometerReading &__First_result) = 0 ;
};

__interface  INTERFACE_UUID("{44BEB693-AA66-5003-886B-1BF273FA5750}") IVectorView_1__IPedometerReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetAt(unsigned index, _di_IPedometerReading &__GetAt_result) = 0 ;
	virtual HRESULT __safecall get_Size(unsigned &__get_Size_result) = 0 ;
	virtual HRESULT __safecall IndexOf(_di_IPedometerReading value, /* out */ unsigned &index, bool &__IndexOf_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned startIndex, unsigned itemsSize, PIPedometerReading items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_Size() { unsigned __r; HRESULT __hr = get_Size(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned Size = {read=_scw_get_Size};
};

__interface  INTERFACE_UUID("{5BBFF840-59F2-5108-9205-A0BBF8F9BA68}") AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{9981AC9E-9B71-5AB7-A104-B9896CCF5BC9}") AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading  : public AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__IVectorView_1__IPedometerReading asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{2AEAC503-A3A8-57B3-A8A9-E16B0CD4C0A4}") IAsyncOperation_1__IVectorView_1__IPedometerReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{F29A8A7A-BB35-53C8-B794-C7A235320EF5}") IAsyncOperation_1__IVectorView_1__IPedometerReading  : public IAsyncOperation_1__IVectorView_1__IPedometerReading_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_IVectorView_1__IPedometerReading &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__IVectorView_1__IPedometerReading Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{82980A2F-4083-4DFB-B411-938EA0F4B946}") IPedometerStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall FromIdAsync(HSTRING deviceId, _di_IAsyncOperation_1__IPedometer &__FromIdAsync_result) = 0 ;
	virtual HRESULT __safecall GetDefaultAsync(_di_IAsyncOperation_1__IPedometer &__GetDefaultAsync_result) = 0 ;
	virtual HRESULT __safecall GetDeviceSelector(HSTRING &__GetDeviceSelector_result) = 0 ;
	virtual HRESULT __safecall GetSystemHistoryAsync(Winapi::Commontypes::DateTime fromTime, _di_IAsyncOperation_1__IVectorView_1__IPedometerReading &__GetSystemHistoryAsync_result) = 0 /* overload */;
	virtual HRESULT __safecall GetSystemHistoryAsync(Winapi::Commontypes::DateTime fromTime, Winapi::Commontypes::TimeSpan duration, _di_IAsyncOperation_1__IVectorView_1__IPedometerReading &__GetSystemHistoryAsync_result) = 0 /* overload */;
};

__interface  INTERFACE_UUID("{79F5C6BB-CE0E-4133-B47E-8627EA72F677}") IPedometerStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetReadingsFromTriggerDetails(_di_ISensorDataThresholdTriggerDetails triggerDetails, _di_IVectorView_1__IPedometerReading &__GetReadingsFromTriggerDetails_result) = 0 ;
};

__interface  INTERFACE_UUID("{94FB7BA0-8960-53B6-9428-327D79078C93}") IKeyValuePair_2__PedometerStepKind__IPedometerReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Key(Winapi::Commontypes::PedometerStepKind &__get_Key_result) = 0 ;
	virtual HRESULT __safecall get_Value(_di_IPedometerReading &__get_Value_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::PedometerStepKind _scw_get_Key() { Winapi::Commontypes::PedometerStepKind __r; HRESULT __hr = get_Key(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::PedometerStepKind Key = {read=_scw_get_Key};
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IPedometerReading _scw_get_Value() { _di_IPedometerReading __r; HRESULT __hr = get_Value(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IPedometerReading Value = {read=_scw_get_Value};
};

__interface  INTERFACE_UUID("{3E88FE66-D4A7-5658-B5CF-1A39E1FC4165}") IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{86F2DB87-DD00-5A3D-8080-F747FA12BE6F}") IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading  : public IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base 
{
	virtual HRESULT __safecall get_Current(_di_IKeyValuePair_2__PedometerStepKind__IPedometerReading &__get_Current_result) = 0 ;
	virtual HRESULT __safecall get_HasCurrent(bool &__get_HasCurrent_result) = 0 ;
	virtual HRESULT __safecall MoveNext(bool &__MoveNext_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned itemsSize, PIKeyValuePair_2__PedometerStepKind__IPedometerReading items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IKeyValuePair_2__PedometerStepKind__IPedometerReading _scw_get_Current() { _di_IKeyValuePair_2__PedometerStepKind__IPedometerReading __r; HRESULT __hr = get_Current(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IKeyValuePair_2__PedometerStepKind__IPedometerReading Current = {read=_scw_get_Current};
	#pragma option push -w-inl
	/* safecall wrapper */ inline bool _scw_get_HasCurrent() { bool __r; HRESULT __hr = get_HasCurrent(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property bool HasCurrent = {read=_scw_get_HasCurrent};
};

__interface  INTERFACE_UUID("{098F29CB-BC91-5639-A541-D5A4811EC35B}") IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{B739C641-577F-5840-ACE4-FB73FD6A35FF}") IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading  : public IIterable_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading_Base 
{
	virtual HRESULT __safecall First(_di_IIterator_1__IKeyValuePair_2__PedometerStepKind__IPedometerReading &__First_result) = 0 ;
};

__interface  INTERFACE_UUID("{64F0C54C-4865-56BD-AC98-64A98451E362}") IMapView_2__PedometerStepKind__IPedometerReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{0E724522-3044-5B79-A2BC-50AC3B3317BD}") IMapView_2__PedometerStepKind__IPedometerReading  : public IMapView_2__PedometerStepKind__IPedometerReading_Base 
{
	virtual HRESULT __safecall Lookup(Winapi::Commontypes::PedometerStepKind key, _di_IPedometerReading &__Lookup_result) = 0 ;
	virtual HRESULT __safecall get_Size(unsigned &__get_Size_result) = 0 ;
	virtual HRESULT __safecall HasKey(Winapi::Commontypes::PedometerStepKind key, bool &__HasKey_result) = 0 ;
	virtual HRESULT __safecall Split(/* out */ _di_IMapView_2__PedometerStepKind__IPedometerReading &first, /* out */ _di_IMapView_2__PedometerStepKind__IPedometerReading &second) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_Size() { unsigned __r; HRESULT __hr = get_Size(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned Size = {read=_scw_get_Size};
};

__interface  INTERFACE_UUID("{E5A406DF-2B81-4ADD-B2FF-77AB6C98BA19}") IPedometer2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReadings(_di_IMapView_2__PedometerStepKind__IPedometerReading &__GetCurrentReadings_result) = 0 ;
};

__interface  INTERFACE_UUID("{71228D59-132D-4D5F-8FF9-2F0DB8751CED}") IProximitySensorReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_IsDetected(bool &__get_IsDetected_result) = 0 ;
	virtual HRESULT __safecall get_DistanceInMillimeters(Winapi::Commontypes::_di_IReference_1__Cardinal &__get_DistanceInMillimeters_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__Cardinal _scw_get_DistanceInMillimeters() { Winapi::Commontypes::_di_IReference_1__Cardinal __r; HRESULT __hr = get_DistanceInMillimeters(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__Cardinal DistanceInMillimeters = {read=_scw_get_DistanceInMillimeters};
	#pragma option push -w-inl
	/* safecall wrapper */ inline bool _scw_get_IsDetected() { bool __r; HRESULT __hr = get_IsDetected(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property bool IsDetected = {read=_scw_get_IsDetected};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{CFC2F366-C3E8-40FD-8CC3-67E289004938}") IProximitySensorReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IProximitySensorReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IProximitySensorReading _scw_get_Reading() { _di_IProximitySensorReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IProximitySensorReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{9F7E222B-892A-5E68-B08A-10384B5F92B9}") TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{26EF705D-2550-54A0-B0D7-82B21D59B6E1}") TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs  : public TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IProximitySensor sender, _di_IProximitySensorReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{54C076B8-ECFB-4944-B928-74FC504D47EE}") IProximitySensor  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	virtual HRESULT __safecall get_MaxDistanceInMillimeters(Winapi::Commontypes::_di_IReference_1__Cardinal &__get_MaxDistanceInMillimeters_result) = 0 ;
	virtual HRESULT __safecall get_MinDistanceInMillimeters(Winapi::Commontypes::_di_IReference_1__Cardinal &__get_MinDistanceInMillimeters_result) = 0 ;
	virtual HRESULT __safecall GetCurrentReading(_di_IProximitySensorReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IProximitySensor__IProximitySensorReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	virtual HRESULT __safecall CreateDisplayOnOffController(Winapi::Foundation::_di_IClosable &__CreateDisplayOnOffController_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__Cardinal _scw_get_MaxDistanceInMillimeters() { Winapi::Commontypes::_di_IReference_1__Cardinal __r; HRESULT __hr = get_MaxDistanceInMillimeters(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__Cardinal MaxDistanceInMillimeters = {read=_scw_get_MaxDistanceInMillimeters};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__Cardinal _scw_get_MinDistanceInMillimeters() { Winapi::Commontypes::_di_IReference_1__Cardinal __r; HRESULT __hr = get_MinDistanceInMillimeters(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__Cardinal MinDistanceInMillimeters = {read=_scw_get_MinDistanceInMillimeters};
};

__interface  INTERFACE_UUID("{29186649-6269-4E57-A5AD-82BE80813392}") IProximitySensorStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDeviceSelector(HSTRING &__GetDeviceSelector_result) = 0 ;
	virtual HRESULT __safecall FromId(HSTRING sensorId, _di_IProximitySensor &__FromId_result) = 0 ;
};

__interface  INTERFACE_UUID("{1D4F08DF-7F49-573B-936A-6D4D4E610930}") IIterator_1__IProximitySensorReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{C10AB1E1-01ED-558C-A391-8393B7BC574C}") IIterator_1__IProximitySensorReading  : public IIterator_1__IProximitySensorReading_Base 
{
	virtual HRESULT __safecall get_Current(_di_IProximitySensorReading &__get_Current_result) = 0 ;
	virtual HRESULT __safecall get_HasCurrent(bool &__get_HasCurrent_result) = 0 ;
	virtual HRESULT __safecall MoveNext(bool &__MoveNext_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned itemsSize, PIProximitySensorReading items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IProximitySensorReading _scw_get_Current() { _di_IProximitySensorReading __r; HRESULT __hr = get_Current(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IProximitySensorReading Current = {read=_scw_get_Current};
	#pragma option push -w-inl
	/* safecall wrapper */ inline bool _scw_get_HasCurrent() { bool __r; HRESULT __hr = get_HasCurrent(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property bool HasCurrent = {read=_scw_get_HasCurrent};
};

__interface  INTERFACE_UUID("{301EBCCF-11AB-5E90-98EE-BD99C0E3BB76}") IIterable_1__IProximitySensorReading_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{CE54F169-A3F3-5A06-8AAE-6223F48C64BC}") IIterable_1__IProximitySensorReading  : public IIterable_1__IProximitySensorReading_Base 
{
	virtual HRESULT __safecall First(_di_IIterator_1__IProximitySensorReading &__First_result) = 0 ;
};

__interface  INTERFACE_UUID("{E94032E2-CD06-511E-BC3C-5C4750E39FC9}") IVectorView_1__IProximitySensorReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetAt(unsigned index, _di_IProximitySensorReading &__GetAt_result) = 0 ;
	virtual HRESULT __safecall get_Size(unsigned &__get_Size_result) = 0 ;
	virtual HRESULT __safecall IndexOf(_di_IProximitySensorReading value, /* out */ unsigned &index, bool &__IndexOf_result) = 0 ;
	virtual HRESULT __safecall GetMany(unsigned startIndex, unsigned itemsSize, PIProximitySensorReading items, unsigned &__GetMany_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_Size() { unsigned __r; HRESULT __hr = get_Size(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned Size = {read=_scw_get_Size};
};

__interface  INTERFACE_UUID("{CBF473AE-E9CA-422F-AD67-4C3D25DF350C}") IProximitySensorStatics2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetReadingsFromTriggerDetails(_di_ISensorDataThresholdTriggerDetails triggerDetails, _di_IVectorView_1__IProximitySensorReading &__GetReadingsFromTriggerDetails_result) = 0 ;
};

__interface  INTERFACE_UUID("{FBE8EF73-7F5E-48C8-AA1A-F1F3BEFC1144}") IAltimeterReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_AltitudeChangeInMeters(double &__get_AltitudeChangeInMeters_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline double _scw_get_AltitudeChangeInMeters() { double __r; HRESULT __hr = get_AltitudeChangeInMeters(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property double AltitudeChangeInMeters = {read=_scw_get_AltitudeChangeInMeters};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{7069D077-446D-47F7-998C-EBC23B45E4A2}") IAltimeterReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_IAltimeterReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_IAltimeterReading _scw_get_Reading() { _di_IAltimeterReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_IAltimeterReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{D775D699-9D74-5473-9C1B-D51A89DB6642}") TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{1564E105-0FCE-54DB-BEFC-EA3A8A698F3D}") TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs  : public TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAltimeter sender, _di_IAltimeterReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{72F057FD-8F04-49F1-B4A7-F4E363B701A2}") IAltimeter  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_IAltimeterReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__IAltimeter__IAltimeterReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{9EB4D7C3-E5AC-47CE-8EEF-D3718168C01F}") IAltimeterStatics  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetDefault(_di_IAltimeter &__GetDefault_result) = 0 ;
};

__interface  INTERFACE_UUID("{C9471BF9-2ADD-48F5-9F08-3D0C7660D938}") IAltimeter2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{543A1BD9-6D0B-42B2-BD69-BC8FAE0F782C}") IAltimeterReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
};

__interface  INTERFACE_UUID("{64004F4D-446A-4366-A87A-5F963268EC53}") Custom_ICustomSensorReading  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Timestamp(Winapi::Commontypes::DateTime &__get_Timestamp_result) = 0 ;
	virtual HRESULT __safecall get_Properties(Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable &__get_Properties_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable _scw_get_Properties() { Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable __r; HRESULT __hr = get_Properties(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IMapView_2__HSTRING__IInspectable Properties = {read=_scw_get_Properties};
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::DateTime _scw_get_Timestamp() { Winapi::Commontypes::DateTime __r; HRESULT __hr = get_Timestamp(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::DateTime Timestamp = {read=_scw_get_Timestamp};
};

__interface  INTERFACE_UUID("{6B202023-CFFD-4CC1-8FF0-E21823D76FCC}") Custom_ICustomSensorReadingChangedEventArgs  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_Reading(_di_Custom_ICustomSensorReading &__get_Reading_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_Custom_ICustomSensorReading _scw_get_Reading() { _di_Custom_ICustomSensorReading __r; HRESULT __hr = get_Reading(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_Custom_ICustomSensorReading Reading = {read=_scw_get_Reading};
};

__interface  INTERFACE_UUID("{AA9460CB-F08C-5963-B232-CC4075E984E7}") TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{A0D2F048-CAC9-5841-927F-5B5A19B6B0B1}") TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs  : public TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_Custom_ICustomSensor sender, _di_Custom_ICustomSensorReadingChangedEventArgs args) = 0 ;
};

__interface  INTERFACE_UUID("{A136F9AD-4034-4B4D-99DD-531AAC649C09}") Custom_ICustomSensor  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall GetCurrentReading(_di_Custom_ICustomSensorReading &__GetCurrentReading_result) = 0 ;
	virtual HRESULT __safecall get_MinimumReportInterval(unsigned &__get_MinimumReportInterval_result) = 0 ;
	virtual HRESULT __safecall put_ReportInterval(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportInterval(unsigned &__get_ReportInterval_result) = 0 ;
	virtual HRESULT __safecall get_DeviceId(HSTRING &__get_DeviceId_result) = 0 ;
	virtual HRESULT __safecall add_ReadingChanged(_di_TypedEventHandler_2__Custom_ICustomSensor__Custom_ICustomSensorReadingChangedEventArgs handler, Winapi::Commontypes::EventRegistrationToken &__add_ReadingChanged_result) = 0 ;
	virtual HRESULT __safecall remove_ReadingChanged(Winapi::Commontypes::EventRegistrationToken token) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline HSTRING _scw_get_DeviceId() { HSTRING __r; HRESULT __hr = get_DeviceId(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property HSTRING DeviceId = {read=_scw_get_DeviceId};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MinimumReportInterval() { unsigned __r; HRESULT __hr = get_MinimumReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MinimumReportInterval = {read=_scw_get_MinimumReportInterval};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportInterval() { unsigned __r; HRESULT __hr = get_ReportInterval(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportInterval = {read=_scw_get_ReportInterval, write=put_ReportInterval};
};

__interface  INTERFACE_UUID("{808B62D7-6E02-5680-A59E-118A98A4E70F}") AsyncOperationCompletedHandler_1__Custom_ICustomSensor_Delegate_Base  : public System::IInterface 
{
	
};

__interface  INTERFACE_UUID("{AA01C1BB-91C4-54DB-9838-F10719591E16}") AsyncOperationCompletedHandler_1__Custom_ICustomSensor  : public AsyncOperationCompletedHandler_1__Custom_ICustomSensor_Delegate_Base 
{
	virtual HRESULT __safecall Invoke(_di_IAsyncOperation_1__Custom_ICustomSensor asyncInfo, Winapi::Commontypes::AsyncStatus asyncStatus) = 0 ;
};

__interface  INTERFACE_UUID("{7FBFBE55-9674-54E3-A269-9CAA820ED23C}") IAsyncOperation_1__Custom_ICustomSensor_Base  : public Winapi::Winrt::IInspectable 
{
	
};

__interface  INTERFACE_UUID("{0E389148-2046-5C91-B993-D30929949BF8}") IAsyncOperation_1__Custom_ICustomSensor  : public IAsyncOperation_1__Custom_ICustomSensor_Base 
{
	virtual HRESULT __safecall put_Completed(_di_AsyncOperationCompletedHandler_1__Custom_ICustomSensor handler) = 0 ;
	virtual HRESULT __safecall get_Completed(_di_AsyncOperationCompletedHandler_1__Custom_ICustomSensor &__get_Completed_result) = 0 ;
	virtual HRESULT __safecall GetResults(_di_Custom_ICustomSensor &__GetResults_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline _di_AsyncOperationCompletedHandler_1__Custom_ICustomSensor _scw_get_Completed() { _di_AsyncOperationCompletedHandler_1__Custom_ICustomSensor __r; HRESULT __hr = get_Completed(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property _di_AsyncOperationCompletedHandler_1__Custom_ICustomSensor Completed = {read=_scw_get_Completed, write=put_Completed};
};

__interface  INTERFACE_UUID("{992052CF-F422-4C7D-836B-E7DC74A7124B}") Custom_ICustomSensorStatics  : public Winapi::Winrt::IInspectable 
{
#ifndef _WIN64
	virtual HRESULT __safecall GetDeviceSelector(GUID interfaceId, HSTRING &__GetDeviceSelector_result) = 0 ;
#else /* _WIN64 */
	virtual HRESULT __safecall GetDeviceSelector(const GUID &interfaceId, HSTRING &__GetDeviceSelector_result) = 0 ;
#endif /* _WIN64 */
	virtual HRESULT __safecall FromIdAsync(HSTRING sensorId, _di_IAsyncOperation_1__Custom_ICustomSensor &__FromIdAsync_result) = 0 ;
};

__interface  INTERFACE_UUID("{20DB3111-EC58-4D9F-BFBD-E77825088510}") Custom_ICustomSensor2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall put_ReportLatency(unsigned value) = 0 ;
	virtual HRESULT __safecall get_ReportLatency(unsigned &__get_ReportLatency_result) = 0 ;
	virtual HRESULT __safecall get_MaxBatchSize(unsigned &__get_MaxBatchSize_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_MaxBatchSize() { unsigned __r; HRESULT __hr = get_MaxBatchSize(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned MaxBatchSize = {read=_scw_get_MaxBatchSize};
	#pragma option push -w-inl
	/* safecall wrapper */ inline unsigned _scw_get_ReportLatency() { unsigned __r; HRESULT __hr = get_ReportLatency(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property unsigned ReportLatency = {read=_scw_get_ReportLatency, write=put_ReportLatency};
};

__interface  INTERFACE_UUID("{223C98EA-BF73-4992-9A48-D3C897594CCB}") Custom_ICustomSensorReading2  : public Winapi::Winrt::IInspectable 
{
	virtual HRESULT __safecall get_PerformanceCount(Winapi::Commontypes::_di_IReference_1__TimeSpan &__get_PerformanceCount_result) = 0 ;
	#pragma option push -w-inl
	/* safecall wrapper */ inline Winapi::Commontypes::_di_IReference_1__TimeSpan _scw_get_PerformanceCount() { Winapi::Commontypes::_di_IReference_1__TimeSpan __r; HRESULT __hr = get_PerformanceCount(__r); System::CheckSafecallResult(__hr); return __r; }
	#pragma option pop
	__property Winapi::Commontypes::_di_IReference_1__TimeSpan PerformanceCount = {read=_scw_get_PerformanceCount};
};

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TAccelerometer : public System::Win::Winrt::TWinRTGenericImportS3__3<_di_IAccelerometerStatics,_di_IAccelerometerStatics2,_di_IAccelerometerStatics3>
{
	typedef System::Win::Winrt::TWinRTGenericImportS3__3<_di_IAccelerometerStatics,_di_IAccelerometerStatics2,_di_IAccelerometerStatics3> inherited;
	
public:
	static _di_IAccelerometer __fastcall GetDefault()/* overload */;
	static _di_IAccelerometer __fastcall GetDefault(Winapi::Commontypes::AccelerometerReadingType readingType)/* overload */;
	static _di_IAsyncOperation_1__IAccelerometer __fastcall FromIdAsync(HSTRING deviceId);
	static HSTRING __fastcall GetDeviceSelector(Winapi::Commontypes::AccelerometerReadingType readingType);
public:
	/* TObject.Create */ inline __fastcall TAccelerometer() : System::Win::Winrt::TWinRTGenericImportS3__3<_di_IAccelerometerStatics,_di_IAccelerometerStatics2,_di_IAccelerometerStatics3>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TAccelerometer() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TInclinometer : public System::Win::Winrt::TWinRTGenericImportS4__4<_di_IInclinometerStatics,_di_IInclinometerStatics2,_di_IInclinometerStatics3,_di_IInclinometerStatics4>
{
	typedef System::Win::Winrt::TWinRTGenericImportS4__4<_di_IInclinometerStatics,_di_IInclinometerStatics2,_di_IInclinometerStatics3,_di_IInclinometerStatics4> inherited;
	
public:
	static HSTRING __fastcall GetDeviceSelector(Winapi::Commontypes::SensorReadingType readingType);
	static _di_IAsyncOperation_1__IInclinometer __fastcall FromIdAsync(HSTRING deviceId);
	static _di_IInclinometer __fastcall GetDefault(Winapi::Commontypes::SensorReadingType sensorReadingtype)/* overload */;
	static _di_IInclinometer __fastcall GetDefault()/* overload */;
	static _di_IInclinometer __fastcall GetDefaultForRelativeReadings();
public:
	/* TObject.Create */ inline __fastcall TInclinometer() : System::Win::Winrt::TWinRTGenericImportS4__4<_di_IInclinometerStatics,_di_IInclinometerStatics2,_di_IInclinometerStatics3,_di_IInclinometerStatics4>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TInclinometer() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TGyrometer : public System::Win::Winrt::TWinRTGenericImportS2__2<_di_IGyrometerStatics,_di_IGyrometerStatics2>
{
	typedef System::Win::Winrt::TWinRTGenericImportS2__2<_di_IGyrometerStatics,_di_IGyrometerStatics2> inherited;
	
public:
	static HSTRING __fastcall GetDeviceSelector();
	static _di_IAsyncOperation_1__IGyrometer __fastcall FromIdAsync(HSTRING deviceId);
	static _di_IGyrometer __fastcall GetDefault();
public:
	/* TObject.Create */ inline __fastcall TGyrometer() : System::Win::Winrt::TWinRTGenericImportS2__2<_di_IGyrometerStatics,_di_IGyrometerStatics2>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TGyrometer() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TCompass : public System::Win::Winrt::TWinRTGenericImportS2__2<_di_ICompassStatics,_di_ICompassStatics2>
{
	typedef System::Win::Winrt::TWinRTGenericImportS2__2<_di_ICompassStatics,_di_ICompassStatics2> inherited;
	
public:
	static HSTRING __fastcall GetDeviceSelector();
	static _di_IAsyncOperation_1__ICompass __fastcall FromIdAsync(HSTRING deviceId);
	static _di_ICompass __fastcall GetDefault();
public:
	/* TObject.Create */ inline __fastcall TCompass() : System::Win::Winrt::TWinRTGenericImportS2__2<_di_ICompassStatics,_di_ICompassStatics2>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TCompass() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TLightSensor : public System::Win::Winrt::TWinRTGenericImportS2__2<_di_ILightSensorStatics,_di_ILightSensorStatics2>
{
	typedef System::Win::Winrt::TWinRTGenericImportS2__2<_di_ILightSensorStatics,_di_ILightSensorStatics2> inherited;
	
public:
	static HSTRING __fastcall GetDeviceSelector();
	static _di_IAsyncOperation_1__ILightSensor __fastcall FromIdAsync(HSTRING deviceId);
	static _di_ILightSensor __fastcall GetDefault();
public:
	/* TObject.Create */ inline __fastcall TLightSensor() : System::Win::Winrt::TWinRTGenericImportS2__2<_di_ILightSensorStatics,_di_ILightSensorStatics2>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TLightSensor() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TOrientationSensor : public System::Win::Winrt::TWinRTGenericImportS4__4<_di_IOrientationSensorStatics,_di_IOrientationSensorStatics2,_di_IOrientationSensorStatics3,_di_IOrientationSensorStatics4>
{
	typedef System::Win::Winrt::TWinRTGenericImportS4__4<_di_IOrientationSensorStatics,_di_IOrientationSensorStatics2,_di_IOrientationSensorStatics3,_di_IOrientationSensorStatics4> inherited;
	
public:
	static _di_IOrientationSensor __fastcall GetDefault()/* overload */;
	static _di_IOrientationSensor __fastcall GetDefaultForRelativeReadings();
	static _di_IOrientationSensor __fastcall GetDefault(Winapi::Commontypes::SensorReadingType sensorReadingtype)/* overload */;
	static _di_IOrientationSensor __fastcall GetDefault(Winapi::Commontypes::SensorReadingType sensorReadingType, Winapi::Commontypes::SensorOptimizationGoal optimizationGoal)/* overload */;
	static HSTRING __fastcall GetDeviceSelector(Winapi::Commontypes::SensorReadingType readingType)/* overload */;
	static HSTRING __fastcall GetDeviceSelector(Winapi::Commontypes::SensorReadingType readingType, Winapi::Commontypes::SensorOptimizationGoal optimizationGoal)/* overload */;
	static _di_IAsyncOperation_1__IOrientationSensor __fastcall FromIdAsync(HSTRING deviceId);
public:
	/* TObject.Create */ inline __fastcall TOrientationSensor() : System::Win::Winrt::TWinRTGenericImportS4__4<_di_IOrientationSensorStatics,_di_IOrientationSensorStatics2,_di_IOrientationSensorStatics3,_di_IOrientationSensorStatics4>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TOrientationSensor() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TSimpleOrientationSensor : public System::Win::Winrt::TWinRTGenericImportS__1<_di_ISimpleOrientationSensorStatics>
{
	typedef System::Win::Winrt::TWinRTGenericImportS__1<_di_ISimpleOrientationSensorStatics> inherited;
	
public:
	static _di_ISimpleOrientationSensor __fastcall GetDefault();
public:
	/* TObject.Create */ inline __fastcall TSimpleOrientationSensor() : System::Win::Winrt::TWinRTGenericImportS__1<_di_ISimpleOrientationSensorStatics>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TSimpleOrientationSensor() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TMagnetometer : public System::Win::Winrt::TWinRTGenericImportS2__2<_di_IMagnetometerStatics,_di_IMagnetometerStatics2>
{
	typedef System::Win::Winrt::TWinRTGenericImportS2__2<_di_IMagnetometerStatics,_di_IMagnetometerStatics2> inherited;
	
public:
	static _di_IMagnetometer __fastcall GetDefault();
	static HSTRING __fastcall GetDeviceSelector();
	static _di_IAsyncOperation_1__IMagnetometer __fastcall FromIdAsync(HSTRING deviceId);
public:
	/* TObject.Create */ inline __fastcall TMagnetometer() : System::Win::Winrt::TWinRTGenericImportS2__2<_di_IMagnetometerStatics,_di_IMagnetometerStatics2>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TMagnetometer() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TActivitySensor : public System::Win::Winrt::TWinRTGenericImportS__1<_di_IActivitySensorStatics>
{
	typedef System::Win::Winrt::TWinRTGenericImportS__1<_di_IActivitySensorStatics> inherited;
	
public:
	static _di_IAsyncOperation_1__IActivitySensor __fastcall GetDefaultAsync();
	static HSTRING __fastcall GetDeviceSelector();
	static _di_IAsyncOperation_1__IActivitySensor __fastcall FromIdAsync(HSTRING deviceId);
	static _di_IAsyncOperation_1__IVectorView_1__IActivitySensorReading __fastcall GetSystemHistoryAsync(const Winapi::Commontypes::DateTime &fromTime)/* overload */;
	static _di_IAsyncOperation_1__IVectorView_1__IActivitySensorReading __fastcall GetSystemHistoryAsync(const Winapi::Commontypes::DateTime &fromTime, const Winapi::Commontypes::TimeSpan &duration)/* overload */;
public:
	/* TObject.Create */ inline __fastcall TActivitySensor() : System::Win::Winrt::TWinRTGenericImportS__1<_di_IActivitySensorStatics>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TActivitySensor() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TBarometer : public System::Win::Winrt::TWinRTGenericImportS2__2<_di_IBarometerStatics,_di_IBarometerStatics2>
{
	typedef System::Win::Winrt::TWinRTGenericImportS2__2<_di_IBarometerStatics,_di_IBarometerStatics2> inherited;
	
public:
	static _di_IBarometer __fastcall GetDefault();
	static _di_IAsyncOperation_1__IBarometer __fastcall FromIdAsync(HSTRING deviceId);
	static HSTRING __fastcall GetDeviceSelector();
public:
	/* TObject.Create */ inline __fastcall TBarometer() : System::Win::Winrt::TWinRTGenericImportS2__2<_di_IBarometerStatics,_di_IBarometerStatics2>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TBarometer() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TPedometer : public System::Win::Winrt::TWinRTGenericImportS2__2<_di_IPedometerStatics,_di_IPedometerStatics2>
{
	typedef System::Win::Winrt::TWinRTGenericImportS2__2<_di_IPedometerStatics,_di_IPedometerStatics2> inherited;
	
public:
	static _di_IAsyncOperation_1__IPedometer __fastcall FromIdAsync(HSTRING deviceId);
	static _di_IAsyncOperation_1__IPedometer __fastcall GetDefaultAsync();
	static HSTRING __fastcall GetDeviceSelector();
	static _di_IAsyncOperation_1__IVectorView_1__IPedometerReading __fastcall GetSystemHistoryAsync(const Winapi::Commontypes::DateTime &fromTime)/* overload */;
	static _di_IAsyncOperation_1__IVectorView_1__IPedometerReading __fastcall GetSystemHistoryAsync(const Winapi::Commontypes::DateTime &fromTime, const Winapi::Commontypes::TimeSpan &duration)/* overload */;
	static _di_IVectorView_1__IPedometerReading __fastcall GetReadingsFromTriggerDetails(_di_ISensorDataThresholdTriggerDetails triggerDetails);
public:
	/* TObject.Create */ inline __fastcall TPedometer() : System::Win::Winrt::TWinRTGenericImportS2__2<_di_IPedometerStatics,_di_IPedometerStatics2>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TPedometer() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TProximitySensor : public System::Win::Winrt::TWinRTGenericImportS2__2<_di_IProximitySensorStatics,_di_IProximitySensorStatics2>
{
	typedef System::Win::Winrt::TWinRTGenericImportS2__2<_di_IProximitySensorStatics,_di_IProximitySensorStatics2> inherited;
	
public:
	static _di_IVectorView_1__IProximitySensorReading __fastcall GetReadingsFromTriggerDetails(_di_ISensorDataThresholdTriggerDetails triggerDetails);
	static HSTRING __fastcall GetDeviceSelector();
	static _di_IProximitySensor __fastcall FromId(HSTRING sensorId);
public:
	/* TObject.Create */ inline __fastcall TProximitySensor() : System::Win::Winrt::TWinRTGenericImportS2__2<_di_IProximitySensorStatics,_di_IProximitySensorStatics2>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TProximitySensor() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TAltimeter : public System::Win::Winrt::TWinRTGenericImportS__1<_di_IAltimeterStatics>
{
	typedef System::Win::Winrt::TWinRTGenericImportS__1<_di_IAltimeterStatics> inherited;
	
public:
	static _di_IAltimeter __fastcall GetDefault();
public:
	/* TObject.Create */ inline __fastcall TAltimeter() : System::Win::Winrt::TWinRTGenericImportS__1<_di_IAltimeterStatics>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TAltimeter() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TCustom_CustomSensor : public System::Win::Winrt::TWinRTGenericImportS__1<_di_Custom_ICustomSensorStatics>
{
	typedef System::Win::Winrt::TWinRTGenericImportS__1<_di_Custom_ICustomSensorStatics> inherited;
	
public:
	static HSTRING __fastcall GetDeviceSelector(const GUID &interfaceId);
	static _di_IAsyncOperation_1__Custom_ICustomSensor __fastcall FromIdAsync(HSTRING sensorId);
public:
	/* TObject.Create */ inline __fastcall TCustom_CustomSensor() : System::Win::Winrt::TWinRTGenericImportS__1<_di_Custom_ICustomSensorStatics>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TCustom_CustomSensor() { }
	
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

//-- var, const, procedure ---------------------------------------------------
}	/* namespace Sensors */
}	/* namespace Devices */
}	/* namespace Winapi */
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Winapi_Devices_SensorsHPP
