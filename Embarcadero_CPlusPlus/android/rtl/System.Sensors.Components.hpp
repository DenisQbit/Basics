// CodeGear C++Builder
// Copyright (c) 1995, 2021 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'System.Sensors.Components.pas' rev: 34.00 (Android)

#ifndef System_Sensors_ComponentsHPP
#define System_Sensors_ComponentsHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Sensors.hpp>
#include <System.Classes.hpp>
#include <System.SysUtils.hpp>
#include <System.Math.hpp>

//-- user supplied -----------------------------------------------------------

namespace System
{
namespace Sensors
{
namespace Components
{
//-- forward type declarations -----------------------------------------------
class DELPHICLASS EGettingSensor;
template<typename T> class DELPHICLASS TSensor__1;
class DELPHICLASS TLocationSensor;
class DELPHICLASS TMotionSensor;
class DELPHICLASS TEnvironmentalSensor;
class DELPHICLASS TOrientationSensor;
class DELPHICLASS TElectricalSensor;
class DELPHICLASS TMechanicalSensor;
class DELPHICLASS TBiometricSensor;
class DELPHICLASS TLightSensor;
class DELPHICLASS TScannerSensor;
//-- type declarations -------------------------------------------------------
typedef void __fastcall (__closure *TOnSensorChoosing)(System::TObject* Sender, const System::Sensors::TSensorArray Sensors, int &ChoseSensorIndex);

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION EGettingSensor : public System::Sysutils::Exception
{
	typedef System::Sysutils::Exception inherited;
	
public:
	/* Exception.Create */ inline __fastcall EGettingSensor(const System::UnicodeString Msg) : System::Sysutils::Exception(Msg) { }
	/* Exception.CreateFmt */ inline __fastcall EGettingSensor(const System::UnicodeString Msg, const System::TVarRec *Args, const int Args_High) : System::Sysutils::Exception(Msg, Args, Args_High) { }
	/* Exception.CreateRes */ inline __fastcall EGettingSensor(NativeUInt Ident)/* overload */ : System::Sysutils::Exception(Ident) { }
	/* Exception.CreateRes */ inline __fastcall EGettingSensor(System::PResStringRec ResStringRec)/* overload */ : System::Sysutils::Exception(ResStringRec) { }
	/* Exception.CreateResFmt */ inline __fastcall EGettingSensor(NativeUInt Ident, const System::TVarRec *Args, const int Args_High)/* overload */ : System::Sysutils::Exception(Ident, Args, Args_High) { }
	/* Exception.CreateResFmt */ inline __fastcall EGettingSensor(System::PResStringRec ResStringRec, const System::TVarRec *Args, const int Args_High)/* overload */ : System::Sysutils::Exception(ResStringRec, Args, Args_High) { }
	/* Exception.CreateHelp */ inline __fastcall EGettingSensor(const System::UnicodeString Msg, int AHelpContext) : System::Sysutils::Exception(Msg, AHelpContext) { }
	/* Exception.CreateFmtHelp */ inline __fastcall EGettingSensor(const System::UnicodeString Msg, const System::TVarRec *Args, const int Args_High, int AHelpContext) : System::Sysutils::Exception(Msg, Args, Args_High, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall EGettingSensor(NativeUInt Ident, int AHelpContext)/* overload */ : System::Sysutils::Exception(Ident, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall EGettingSensor(System::PResStringRec ResStringRec, int AHelpContext)/* overload */ : System::Sysutils::Exception(ResStringRec, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall EGettingSensor(System::PResStringRec ResStringRec, const System::TVarRec *Args, const int Args_High, int AHelpContext)/* overload */ : System::Sysutils::Exception(ResStringRec, Args, Args_High, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall EGettingSensor(NativeUInt Ident, const System::TVarRec *Args, const int Args_High, int AHelpContext)/* overload */ : System::Sysutils::Exception(Ident, Args, Args_High, AHelpContext) { }
	/* Exception.Destroy */ inline __fastcall virtual ~EGettingSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TSensor__1 : public System::Classes::TComponent
{
	typedef System::Classes::TComponent inherited;
	
private:
	bool FDesignTimeActivation;
	System::Classes::TNotifyEvent FOnSensorRemoved;
	System::Classes::TNotifyEvent FOnStateChanged;
	TOnSensorChoosing FOnSensorChoosing;
	void __fastcall SetActive(const bool Value);
	bool __fastcall GetActive();
	void __fastcall SetOnSensorRemoved(const System::Classes::TNotifyEvent Value);
	void __fastcall SetOnStateChanged(const System::Classes::TNotifyEvent Value);
	
protected:
	System::Sensors::TSensorCategory FCategorySensor;
	System::Sensors::TSensorManager* FManager;
	T FSensor;
	virtual T __fastcall GetSensor();
	virtual void __fastcall UpdateSensorProperties();
	virtual void __fastcall DoSensorRemoved(System::TObject* Sender);
	virtual void __fastcall DoSensorChoosing(const System::Sensors::TSensorArray ASensors, int &AChoseSensorIndex);
	virtual void __fastcall DoStart();
	virtual void __fastcall DoStateChanged(System::TObject* Sender);
	virtual void __fastcall DoStop();
	virtual HRESULT __stdcall QueryInterface(const GUID IID, /* out */ void *Obj);
	
public:
	__fastcall virtual TSensor__1(System::Classes::TComponent* AOwner);
	__property T Sensor = {read=FSensor};
	
__published:
	__property bool Active = {read=GetActive, write=SetActive, default=0};
	__property TOnSensorChoosing OnSensorChoosing = {read=FOnSensorChoosing, write=FOnSensorChoosing};
	__property System::Classes::TNotifyEvent OnSensorRemoved = {read=FOnSensorRemoved, write=SetOnSensorRemoved};
	__property System::Classes::TNotifyEvent OnStateChanged = {read=FOnStateChanged, write=SetOnStateChanged};
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TSensor__1() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

class PASCALIMPLEMENTATION TLocationSensor : public TSensor__1<System::Sensors::TCustomLocationSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomLocationSensor*> inherited;
	
private:
	bool FOptimize;
	System::Sensors::TLocationChangeType FLocationChange;
	double FAccuracy;
	System::Sensors::TLocationActivityType FActivityType;
	double FDistance;
	System::Sensors::TLocationUsageAuthorization FUsageAuthorization;
	System::Sensors::TLocationChangedEvent FOnLocationChanged;
	System::Sensors::TRegionProximityEvent FOnEnterRegion;
	System::Sensors::TRegionProximityEvent FOnExitRegion;
	System::Sensors::THeadingChangedEvent FOnHeadingChanged;
	System::Sensors::TLocationUpdatesPausedChangedEvent FOnLocationUpdatesPausedChanged;
	void __fastcall SetOptimize(const bool Value);
	void __fastcall SetOnLocationChanged(const System::Sensors::TLocationChangedEvent Value);
	void __fastcall SetOnLocationUpdatesPausedChanged(const System::Sensors::TLocationUpdatesPausedChangedEvent Value);
	void __fastcall SetOnEnterRegion(const System::Sensors::TRegionProximityEvent Value);
	void __fastcall SetOnExitRegion(const System::Sensors::TRegionProximityEvent Value);
	void __fastcall SetLocationChange(const System::Sensors::TLocationChangeType Value);
	void __fastcall SetAccuracy(const double Value);
	void __fastcall SetActivityType(const System::Sensors::TLocationActivityType Value);
	void __fastcall SetDistance(const double Value);
	void __fastcall SetOnHeadingChanged(const System::Sensors::THeadingChangedEvent Value);
	void __fastcall SetUsageAuthorization(const System::Sensors::TLocationUsageAuthorization Value);
	
protected:
	virtual void __fastcall UpdateSensorProperties();
	virtual void __fastcall DoStart();
	virtual void __fastcall DoStop();
	virtual void __fastcall DoStateChanged(System::TObject* Sender);
	System::Sensors::TLocationRegion __fastcall GetRegion(const int AIndex);
	int __fastcall GetRegionCount();
	
public:
	__fastcall virtual TLocationSensor(System::Classes::TComponent* AOwner);
	System::Sensors::TAuthorizationType __fastcall Authorized();
	void __fastcall AddRegion(const System::Sensors::TLocationRegion &Value);
	void __fastcall RemoveRegion(const System::Sensors::TLocationRegion &Value);
	void __fastcall ClearRegions();
	__property int RegionCount = {read=GetRegionCount, nodefault};
	__property System::Sensors::TLocationRegion Regions[const int AIndex] = {read=GetRegion};
	
__published:
	__property bool Optimize = {read=FOptimize, write=SetOptimize, default=1};
	__property System::Sensors::TLocationChangeType LocationChange = {read=FLocationChange, write=SetLocationChange, default=0};
	__property double Accuracy = {read=FAccuracy, write=SetAccuracy};
	__property System::Sensors::TLocationActivityType ActivityType = {read=FActivityType, write=SetActivityType, nodefault};
	__property double Distance = {read=FDistance, write=SetDistance};
	__property System::Sensors::TLocationUsageAuthorization UsageAuthorization = {read=FUsageAuthorization, write=SetUsageAuthorization, nodefault};
	__property System::Sensors::TLocationChangedEvent OnLocationChanged = {read=FOnLocationChanged, write=SetOnLocationChanged};
	__property System::Sensors::TRegionProximityEvent OnEnterRegion = {read=FOnEnterRegion, write=SetOnEnterRegion};
	__property System::Sensors::TRegionProximityEvent OnExitRegion = {read=FOnExitRegion, write=SetOnExitRegion};
	__property System::Sensors::THeadingChangedEvent OnHeadingChanged = {read=FOnHeadingChanged, write=SetOnHeadingChanged};
	__property System::Sensors::TLocationUpdatesPausedChangedEvent OnLocationUpdatesPausedChanged = {read=FOnLocationUpdatesPausedChanged, write=SetOnLocationUpdatesPausedChanged};
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TLocationSensor() { }
	
};


#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION TMotionSensor : public TSensor__1<System::Sensors::TCustomMotionSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomMotionSensor*> inherited;
	
protected:
	virtual void __fastcall DoStart();
	virtual void __fastcall DoStop();
	
public:
	__fastcall virtual TMotionSensor(System::Classes::TComponent* AOwner);
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TMotionSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION TEnvironmentalSensor : public TSensor__1<System::Sensors::TCustomEnvironmentalSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomEnvironmentalSensor*> inherited;
	
public:
	__fastcall virtual TEnvironmentalSensor(System::Classes::TComponent* AOwner);
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TEnvironmentalSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION TOrientationSensor : public TSensor__1<System::Sensors::TCustomOrientationSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomOrientationSensor*> inherited;
	
protected:
	virtual void __fastcall DoStart();
	virtual void __fastcall DoStop();
	
public:
	__fastcall virtual TOrientationSensor(System::Classes::TComponent* AOwner);
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TOrientationSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION TElectricalSensor : public TSensor__1<System::Sensors::TCustomElectricalSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomElectricalSensor*> inherited;
	
public:
	__fastcall virtual TElectricalSensor(System::Classes::TComponent* AOwner);
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TElectricalSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION TMechanicalSensor : public TSensor__1<System::Sensors::TCustomMechanicalSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomMechanicalSensor*> inherited;
	
public:
	__fastcall virtual TMechanicalSensor(System::Classes::TComponent* AOwner);
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TMechanicalSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION TBiometricSensor : public TSensor__1<System::Sensors::TCustomBiometricSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomBiometricSensor*> inherited;
	
public:
	__fastcall virtual TBiometricSensor(System::Classes::TComponent* AOwner);
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TBiometricSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION TLightSensor : public TSensor__1<System::Sensors::TCustomLightSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomLightSensor*> inherited;
	
public:
	__fastcall virtual TLightSensor(System::Classes::TComponent* AOwner);
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TLightSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

#ifndef __aarch64__
#pragma pack(push,4)
#endif /* not __aarch64__ */
class PASCALIMPLEMENTATION TScannerSensor : public TSensor__1<System::Sensors::TCustomScannerSensor*>
{
	typedef TSensor__1<System::Sensors::TCustomScannerSensor*> inherited;
	
public:
	__fastcall virtual TScannerSensor(System::Classes::TComponent* AOwner);
public:
	/* TComponent.Destroy */ inline __fastcall virtual ~TScannerSensor() { }
	
};

#ifndef __aarch64__
#pragma pack(pop)
#endif /* not __aarch64__ */

//-- var, const, procedure ---------------------------------------------------
static constexpr int pidSensorSupportPlatforms = int(0x1945f);
}	/* namespace Components */
}	/* namespace Sensors */
}	/* namespace System */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_SYSTEM_SENSORS_COMPONENTS)
using namespace System::Sensors::Components;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_SYSTEM_SENSORS)
using namespace System::Sensors;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_SYSTEM)
using namespace System;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// System_Sensors_ComponentsHPP
