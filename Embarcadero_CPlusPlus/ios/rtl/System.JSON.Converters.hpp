// CodeGear C++Builder
// Copyright (c) 1995, 2021 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'System.JSON.Converters.pas' rev: 34.00 (iOS)

#ifndef System_Json_ConvertersHPP
#define System_Json_ConvertersHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Generics.Collections.hpp>
#include <System.TypInfo.hpp>
#include <System.Rtti.hpp>
#include <System.JSON.Writers.hpp>
#include <System.JSON.Readers.hpp>
#include <System.JSON.Serializers.hpp>
#include <System.Generics.Defaults.hpp>
#include <System.Types.hpp>
#include <System.SysUtils.hpp>

//-- user supplied -----------------------------------------------------------

namespace System
{
namespace Json
{
namespace Converters
{
//-- forward type declarations -----------------------------------------------
class DELPHICLASS TJsonEnumNameConverter;
class DELPHICLASS TJsonSetNamesConverter;
template<typename T> class DELPHICLASS TJsonCustomCreationConverter__1;
class DELPHICLASS TJsonListHelperConverter;
template<typename V> class DELPHICLASS TJsonListConverter__1;
template<typename V> class DELPHICLASS TJsonStackConverter__1;
template<typename V> class DELPHICLASS TJsonQueueConverter__1;
template<typename K, typename V> class DELPHICLASS TJsonDictionaryConverter__2;
template<typename V> class DELPHICLASS TJsonStringDictionaryConverter__1;
//-- type declarations -------------------------------------------------------
class PASCALIMPLEMENTATION TJsonEnumNameConverter : public System::Json::Serializers::TJsonConverter
{
	typedef System::Json::Serializers::TJsonConverter inherited;
	
public:
	virtual void __fastcall WriteJson(System::Json::Writers::TJsonWriter* const AWriter, const System::Rtti::TValue &AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual System::Rtti::TValue __fastcall ReadJson(System::Json::Readers::TJsonReader* const AReader, System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AExistingValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual bool __fastcall CanConvert(System::Typinfo::PTypeInfo ATypeInf);
public:
	/* TObject.Create */ inline __fastcall TJsonEnumNameConverter() : System::Json::Serializers::TJsonConverter() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonEnumNameConverter() { }
	
};


class PASCALIMPLEMENTATION TJsonSetNamesConverter : public System::Json::Serializers::TJsonConverter
{
	typedef System::Json::Serializers::TJsonConverter inherited;
	
private:
	__int64 __fastcall ExtractSetValue(System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AValue);
	
public:
	virtual void __fastcall WriteJson(System::Json::Writers::TJsonWriter* const AWriter, const System::Rtti::TValue &AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual System::Rtti::TValue __fastcall ReadJson(System::Json::Readers::TJsonReader* const AReader, System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AExistingValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual bool __fastcall CanConvert(System::Typinfo::PTypeInfo ATypeInf);
public:
	/* TObject.Create */ inline __fastcall TJsonSetNamesConverter() : System::Json::Serializers::TJsonConverter() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonSetNamesConverter() { }
	
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TJsonCustomCreationConverter__1 : public System::Json::Serializers::TJsonConverter
{
	typedef System::Json::Serializers::TJsonConverter inherited;
	
private:
	System::Typinfo::TTypeInfo *FType;
	
protected:
	virtual System::Rtti::TValue __fastcall CreateInstance(System::Typinfo::PTypeInfo ATypeInf) = 0 ;
	
public:
	__fastcall TJsonCustomCreationConverter__1();
	virtual void __fastcall WriteJson(System::Json::Writers::TJsonWriter* const AWriter, const System::Rtti::TValue &AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual System::Rtti::TValue __fastcall ReadJson(System::Json::Readers::TJsonReader* const AReader, System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AExistingValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual bool __fastcall CanConvert(System::Typinfo::PTypeInfo ATypeInf);
	virtual bool __fastcall CanWrite();
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonCustomCreationConverter__1() { }
	
};


class PASCALIMPLEMENTATION TJsonListHelperConverter : public System::Json::Serializers::TJsonConverter
{
	typedef System::Json::Serializers::TJsonConverter inherited;
	
private:
	System::Rtti::TRttiContext FRttiCtx;
	
public:
	__fastcall TJsonListHelperConverter();
	virtual void __fastcall WriteJson(System::Json::Writers::TJsonWriter* const AWriter, const System::Rtti::TValue &AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual System::Rtti::TValue __fastcall ReadJson(System::Json::Readers::TJsonReader* const AReader, System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AExistingValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual bool __fastcall CanConvert(System::Typinfo::PTypeInfo ATypeInf);
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonListHelperConverter() { }
	
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename V> class PASCALIMPLEMENTATION TJsonListConverter__1 : public System::Json::Serializers::TJsonConverter
{
	typedef System::Json::Serializers::TJsonConverter inherited;
	
protected:
	virtual System::Generics::Collections::TList__1<V>* __fastcall CreateInstance();
	
public:
	virtual void __fastcall WriteJson(System::Json::Writers::TJsonWriter* const AWriter, const System::Rtti::TValue &AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual System::Rtti::TValue __fastcall ReadJson(System::Json::Readers::TJsonReader* const AReader, System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AExistingValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual bool __fastcall CanConvert(System::Typinfo::PTypeInfo ATypeInf);
public:
	/* TObject.Create */ inline __fastcall TJsonListConverter__1() : System::Json::Serializers::TJsonConverter() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonListConverter__1() { }
	
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename V> class PASCALIMPLEMENTATION TJsonStackConverter__1 : public System::Json::Serializers::TJsonConverter
{
	typedef System::Json::Serializers::TJsonConverter inherited;
	
protected:
	virtual System::Generics::Collections::TStack__1<V>* __fastcall CreateInstance();
	
public:
	virtual void __fastcall WriteJson(System::Json::Writers::TJsonWriter* const AWriter, const System::Rtti::TValue &AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual System::Rtti::TValue __fastcall ReadJson(System::Json::Readers::TJsonReader* const AReader, System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AExistingValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual bool __fastcall CanConvert(System::Typinfo::PTypeInfo ATypeInf);
public:
	/* TObject.Create */ inline __fastcall TJsonStackConverter__1() : System::Json::Serializers::TJsonConverter() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonStackConverter__1() { }
	
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename V> class PASCALIMPLEMENTATION TJsonQueueConverter__1 : public System::Json::Serializers::TJsonConverter
{
	typedef System::Json::Serializers::TJsonConverter inherited;
	
protected:
	virtual System::Generics::Collections::TQueue__1<V>* __fastcall CreateInstance();
	
public:
	virtual void __fastcall WriteJson(System::Json::Writers::TJsonWriter* const AWriter, const System::Rtti::TValue &AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual System::Rtti::TValue __fastcall ReadJson(System::Json::Readers::TJsonReader* const AReader, System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AExistingValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual bool __fastcall CanConvert(System::Typinfo::PTypeInfo ATypeInf);
public:
	/* TObject.Create */ inline __fastcall TJsonQueueConverter__1() : System::Json::Serializers::TJsonConverter() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonQueueConverter__1() { }
	
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename K, typename V> class PASCALIMPLEMENTATION TJsonDictionaryConverter__2 : public System::Json::Serializers::TJsonConverter
{
	typedef System::Json::Serializers::TJsonConverter inherited;
	
protected:
	virtual System::Generics::Collections::TDictionary__2<K,V>* __fastcall CreateDictionary();
	virtual K __fastcall PropertyToKey(const System::UnicodeString APropertyName) = 0 ;
	virtual System::UnicodeString __fastcall KeyToProperty(const K AKey) = 0 ;
	System::UnicodeString __fastcall ReadKey(System::Json::Readers::TJsonReader* const AReader, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual V __fastcall ReadValue(System::Json::Readers::TJsonReader* const AReader, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual void __fastcall WriteValue(System::Json::Writers::TJsonWriter* const AWriter, const V AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	
public:
	virtual void __fastcall WriteJson(System::Json::Writers::TJsonWriter* const AWriter, const System::Rtti::TValue &AValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual System::Rtti::TValue __fastcall ReadJson(System::Json::Readers::TJsonReader* const AReader, System::Typinfo::PTypeInfo ATypeInf, const System::Rtti::TValue &AExistingValue, System::Json::Serializers::TJsonSerializer* const ASerializer);
	virtual bool __fastcall CanConvert(System::Typinfo::PTypeInfo ATypeInf);
public:
	/* TObject.Create */ inline __fastcall TJsonDictionaryConverter__2() : System::Json::Serializers::TJsonConverter() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonDictionaryConverter__2() { }
	
};


// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename V> class PASCALIMPLEMENTATION TJsonStringDictionaryConverter__1 : public TJsonDictionaryConverter__2<System::UnicodeString,V>
{
	typedef TJsonDictionaryConverter__2<System::UnicodeString,V> inherited;
	
protected:
	virtual System::UnicodeString __fastcall PropertyToKey(const System::UnicodeString APropertyName);
	virtual System::UnicodeString __fastcall KeyToProperty(const System::UnicodeString AKey);
public:
	/* TObject.Create */ inline __fastcall TJsonStringDictionaryConverter__1() : TJsonDictionaryConverter__2<System::UnicodeString,V>() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TJsonStringDictionaryConverter__1() { }
	
};


//-- var, const, procedure ---------------------------------------------------
}	/* namespace Converters */
}	/* namespace Json */
}	/* namespace System */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_SYSTEM_JSON_CONVERTERS)
using namespace System::Json::Converters;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_SYSTEM_JSON)
using namespace System::Json;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_SYSTEM)
using namespace System;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// System_Json_ConvertersHPP
