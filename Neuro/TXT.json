{

"\n__adding.Value[_field(\"num\")] = BilixFlights->EnumerateActHeadNumber(YearOf(__adding.Element[_field(\"date.begin\")]->DateTime));\n":"\n#include <iostream>\n#include <map>\n#include <string>\n#include <ctime>\n#include <vector>\ntypedef int TDateTime;\nconst TDateTime EMPTY_DATE = 0;\nstruct BaseDataElement {\n    std::string Generic;\n    TDateTime DateTime = EMPTY_DATE;\n    std::vector<std::string> Array;\n    void Clear() {\n        Generic.clear();\n        DateTime = EMPTY_DATE;\n        Array.clear();\n    }\n};\nclass OctetBilixFlights {\npublic:\n    int EnumerateActHeadNumber(int year) {\n        return year;    \n    }\n};\nstruct __adding {\n    std::map<std::string, int> Value;\n    std::map<std::string, BaseDataElement*> Element;\n};\nstd::string _field(const std::string& key) {\n    return key;\n}\nint YearOf(TDateTime dateTime) {\n    return dateTime;\n}\nvoid InitializeElementAndSetDate(__adding& adding, const std::string& key, TDateTime dateTime) {\n    adding.Element[_field(key)] = new BaseDataElement();\n    adding.Element[_field(key)]->DateTime = dateTime;\n}\nvoid DeleteElement(__adding& adding, const std::string& key) {\n    delete adding.Element[_field(key)];\n    adding.Element.erase(_field(key));\n}\nint main() {\n    __adding __adding;\n    OctetBilixFlights* BilixFlights = new OctetBilixFlights();\n    std::time_t now = std::time(nullptr);\n    std::tm now_tm;\n    localtime_s(&now_tm, &now);\n    InitializeElementAndSetDate(__adding, \"date.begin\", now_tm.tm_year + 1900);\n    __adding.Value[_field(\"num\")] = BilixFlights->EnumerateActHeadNumber(YearOf(__adding.Element[_field(\"date.begin\")]->DateTime));\n    DeleteElement(__adding, \"date.begin\");\n    delete BilixFlights;\n    return 0;\n}\n",
"":""
    
}